
PL_ProCo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004930  08004930  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004930  08004930  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004930  08004930  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  080049a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080049a8  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c305  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e83  00000000  00000000  0002c39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002e228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002ed80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d3a  00000000  00000000  0002f828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4c4  00000000  00000000  00048562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008beed  00000000  00000000  00056a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003658  00000000  00000000  000e2964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080047e4 	.word	0x080047e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080047e4 	.word	0x080047e4

0800014c <_write>:
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>

/*----------------------------------------------------------------------------*/
int _write(int file, char *ptr, int len) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
    uint8_t xStatus;
    switch (file) {
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	2b01      	cmp	r3, #1
 800015c:	d003      	beq.n	8000166 <_write+0x1a>
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	2b02      	cmp	r3, #2
 8000162:	d015      	beq.n	8000190 <_write+0x44>
 8000164:	e029      	b.n	80001ba <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart2,(uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	b29a      	uxth	r2, r3
 800016a:	f04f 33ff 	mov.w	r3, #4294967295
 800016e:	68b9      	ldr	r1, [r7, #8]
 8000170:	481a      	ldr	r0, [pc, #104]	; (80001dc <_write+0x90>)
 8000172:	f003 f9f1 	bl	8003558 <HAL_UART_Transmit>
 8000176:	4603      	mov	r3, r0
 8000178:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 800017a:	7dfb      	ldrb	r3, [r7, #23]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d024      	beq.n	80001ca <_write+0x7e>
			errno = EIO;
 8000180:	f003 fb6a 	bl	8003858 <__errno>
 8000184:	4603      	mov	r3, r0
 8000186:	2205      	movs	r2, #5
 8000188:	601a      	str	r2, [r3, #0]
			return -1;
 800018a:	f04f 33ff 	mov.w	r3, #4294967295
 800018e:	e020      	b.n	80001d2 <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus =  HAL_UART_Transmit(&huart2,(uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	b29a      	uxth	r2, r3
 8000194:	f04f 33ff 	mov.w	r3, #4294967295
 8000198:	68b9      	ldr	r1, [r7, #8]
 800019a:	4810      	ldr	r0, [pc, #64]	; (80001dc <_write+0x90>)
 800019c:	f003 f9dc 	bl	8003558 <HAL_UART_Transmit>
 80001a0:	4603      	mov	r3, r0
 80001a2:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 80001a4:	7dfb      	ldrb	r3, [r7, #23]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d011      	beq.n	80001ce <_write+0x82>
			errno = EIO;
 80001aa:	f003 fb55 	bl	8003858 <__errno>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2205      	movs	r2, #5
 80001b2:	601a      	str	r2, [r3, #0]
			return -1;
 80001b4:	f04f 33ff 	mov.w	r3, #4294967295
 80001b8:	e00b      	b.n	80001d2 <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 80001ba:	f003 fb4d 	bl	8003858 <__errno>
 80001be:	4603      	mov	r3, r0
 80001c0:	2209      	movs	r2, #9
 80001c2:	601a      	str	r2, [r3, #0]
        return -1;
 80001c4:	f04f 33ff 	mov.w	r3, #4294967295
 80001c8:	e003      	b.n	80001d2 <_write+0x86>
        break;
 80001ca:	bf00      	nop
 80001cc:	e000      	b.n	80001d0 <_write+0x84>
        break;
 80001ce:	bf00      	nop
    }
    return len;
 80001d0:	687b      	ldr	r3, [r7, #4]
}
 80001d2:	4618      	mov	r0, r3
 80001d4:	3718      	adds	r7, #24
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000154 	.word	0x20000154

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b094      	sub	sp, #80	; 0x50
 80001e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e6:	f000 fd6f 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ea:	f000 f979 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ee:	f000 faa7 	bl	8000740 <MX_GPIO_Init>
  MX_DMA_Init();
 80001f2:	f000 fa87 	bl	8000704 <MX_DMA_Init>
  MX_ADC1_Init();
 80001f6:	f000 f9c3 	bl	8000580 <MX_ADC1_Init>
  MX_I2C1_Init();
 80001fa:	f000 fa2b 	bl	8000654 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80001fe:	f000 fa57 	bl	80006b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Determine how many pots are connected
  uint8_t matrix_setting[4],i;
  uint8_t amount_pots_used = 0;
 8000202:	2300      	movs	r3, #0
 8000204:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint8_t pots[MAX_AMOUNT_POTS];

  /* No shutdown */
  matrix_setting[0] = 0x00;
 8000208:	2300      	movs	r3, #0
 800020a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  matrix_setting[1] = 0x00;
 800020e:	2300      	movs	r3, #0
 8000210:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

  /* 5mA CC */
  matrix_setting[2] = 0x0D;
 8000214:	230d      	movs	r3, #13
 8000216:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  matrix_setting[3] = 0x08;
 800021a:	2308      	movs	r3, #8
 800021c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  for(i = 0 ; i < MAX_AMOUNT_POTS ; i++)
 8000220:	2300      	movs	r3, #0
 8000222:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000226:	e037      	b.n	8000298 <main+0xb8>
  {
	  HAL_StatusTypeDef ret;
	  ret = HAL_I2C_Master_Transmit(&hi2c1,(addresses[i] << 1),matrix_setting, 4, HAL_MAX_DELAY);
 8000228:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800022c:	4aa8      	ldr	r2, [pc, #672]	; (80004d0 <main+0x2f0>)
 800022e:	5cd3      	ldrb	r3, [r2, r3]
 8000230:	b29b      	uxth	r3, r3
 8000232:	005b      	lsls	r3, r3, #1
 8000234:	b299      	uxth	r1, r3
 8000236:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800023a:	f04f 33ff 	mov.w	r3, #4294967295
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	2304      	movs	r3, #4
 8000242:	48a4      	ldr	r0, [pc, #656]	; (80004d4 <main+0x2f4>)
 8000244:	f002 f85c 	bl	8002300 <HAL_I2C_Master_Transmit>
 8000248:	4603      	mov	r3, r0
 800024a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	  if(ret == HAL_OK)
 800024e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000252:	2b00      	cmp	r3, #0
 8000254:	d114      	bne.n	8000280 <main+0xa0>
	  {
		  pots[i] = 1;
 8000256:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800025a:	3348      	adds	r3, #72	; 0x48
 800025c:	443b      	add	r3, r7
 800025e:	2201      	movs	r2, #1
 8000260:	f803 2c18 	strb.w	r2, [r3, #-24]
		  amount_pots_used++;
 8000264:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000268:	3301      	adds	r3, #1
 800026a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		  // Turn of leds of this pot
		  setOneLED(0, addresses[i]);
 800026e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000272:	4a97      	ldr	r2, [pc, #604]	; (80004d0 <main+0x2f0>)
 8000274:	5cd3      	ldrb	r3, [r2, r3]
 8000276:	4619      	mov	r1, r3
 8000278:	2000      	movs	r0, #0
 800027a:	f000 faa3 	bl	80007c4 <setOneLED>
 800027e:	e006      	b.n	800028e <main+0xae>
	  }
	  else
	  {
		  pots[i] = 0;
 8000280:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000284:	3348      	adds	r3, #72	; 0x48
 8000286:	443b      	add	r3, r7
 8000288:	2200      	movs	r2, #0
 800028a:	f803 2c18 	strb.w	r2, [r3, #-24]
  for(i = 0 ; i < MAX_AMOUNT_POTS ; i++)
 800028e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000292:	3301      	adds	r3, #1
 8000294:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000298:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800029c:	2b03      	cmp	r3, #3
 800029e:	d9c3      	bls.n	8000228 <main+0x48>
	  }
  }

  printf("Amount of pots detected: %d \r\n",amount_pots_used);
 80002a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80002a4:	4619      	mov	r1, r3
 80002a6:	488c      	ldr	r0, [pc, #560]	; (80004d8 <main+0x2f8>)
 80002a8:	f003 fb08 	bl	80038bc <iprintf>
  uint32_t adc_val[MAX_AMOUNT_POTS];
  uint32_t temp;
  uint32_t prev_led_value[MAX_AMOUNT_POTS];
  uint32_t prev_raw_adc_value[MAX_AMOUNT_POTS];

  uint32_t higherb = 4035;
 80002ac:	f640 73c3 	movw	r3, #4035	; 0xfc3
 80002b0:	643b      	str	r3, [r7, #64]	; 0x40

  // Read ADC value, is stored in array adc_val
  HAL_ADC_Start_DMA(&hadc1,adc_val, MAX_AMOUNT_POTS);
 80002b2:	f107 0320 	add.w	r3, r7, #32
 80002b6:	2204      	movs	r2, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	4888      	ldr	r0, [pc, #544]	; (80004dc <main+0x2fc>)
 80002bc:	f000 ff68 	bl	8001190 <HAL_ADC_Start_DMA>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002c0:	f04f 31ff 	mov.w	r1, #4294967295
 80002c4:	4885      	ldr	r0, [pc, #532]	; (80004dc <main+0x2fc>)
 80002c6:	f000 fe5d 	bl	8000f84 <HAL_ADC_PollForConversion>

  // Repeat above lines, weird ADC DMA glitch fix
  HAL_ADC_Start_DMA(&hadc1,adc_val, MAX_AMOUNT_POTS);
 80002ca:	f107 0320 	add.w	r3, r7, #32
 80002ce:	2204      	movs	r2, #4
 80002d0:	4619      	mov	r1, r3
 80002d2:	4882      	ldr	r0, [pc, #520]	; (80004dc <main+0x2fc>)
 80002d4:	f000 ff5c 	bl	8001190 <HAL_ADC_Start_DMA>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002d8:	f04f 31ff 	mov.w	r1, #4294967295
 80002dc:	487f      	ldr	r0, [pc, #508]	; (80004dc <main+0x2fc>)
 80002de:	f000 fe51 	bl	8000f84 <HAL_ADC_PollForConversion>

  for(i = 0 ; i < amount_pots_used ; i++)
 80002e2:	2300      	movs	r3, #0
 80002e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80002e8:	e047      	b.n	800037a <main+0x19a>
  {
	  prev_raw_adc_value[i] =  adc_val[i];
 80002ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80002ee:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	3348      	adds	r3, #72	; 0x48
 80002f6:	443b      	add	r3, r7
 80002f8:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80002fc:	008b      	lsls	r3, r1, #2
 80002fe:	3348      	adds	r3, #72	; 0x48
 8000300:	443b      	add	r3, r7
 8000302:	f843 2c48 	str.w	r2, [r3, #-72]
	  prev_led_value[i] = higherb - adc_val[i];
 8000306:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	3348      	adds	r3, #72	; 0x48
 800030e:	443b      	add	r3, r7
 8000310:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8000314:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000318:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800031a:	1a8a      	subs	r2, r1, r2
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	3348      	adds	r3, #72	; 0x48
 8000320:	443b      	add	r3, r7
 8000322:	f843 2c38 	str.w	r2, [r3, #-56]
	  prev_led_value[i] = prev_led_value[i] * 21 / higherb;
 8000326:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	3348      	adds	r3, #72	; 0x48
 800032e:	443b      	add	r3, r7
 8000330:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8000334:	4613      	mov	r3, r2
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	4413      	add	r3, r2
 800033a:	00da      	lsls	r2, r3, #3
 800033c:	1ad1      	subs	r1, r2, r3
 800033e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000344:	fbb1 f2f2 	udiv	r2, r1, r2
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	3348      	adds	r3, #72	; 0x48
 800034c:	443b      	add	r3, r7
 800034e:	f843 2c38 	str.w	r2, [r3, #-56]
	  prev_led_value[i] += 2;
 8000352:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	3348      	adds	r3, #72	; 0x48
 800035a:	443b      	add	r3, r7
 800035c:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8000360:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000364:	3202      	adds	r2, #2
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	3348      	adds	r3, #72	; 0x48
 800036a:	443b      	add	r3, r7
 800036c:	f843 2c38 	str.w	r2, [r3, #-56]
  for(i = 0 ; i < amount_pots_used ; i++)
 8000370:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000374:	3301      	adds	r3, #1
 8000376:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800037a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800037e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000382:	429a      	cmp	r2, r3
 8000384:	d3b1      	bcc.n	80002ea <main+0x10a>
  }


  // Initial animation
  for(i = 0 ; i < amount_pots_used ; i++)
 8000386:	2300      	movs	r3, #0
 8000388:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800038c:	e014      	b.n	80003b8 <main+0x1d8>
  {
	  setupAnimation(addresses[i],prev_led_value[i]);
 800038e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000392:	4a4f      	ldr	r2, [pc, #316]	; (80004d0 <main+0x2f0>)
 8000394:	5cd2      	ldrb	r2, [r2, r3]
 8000396:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	3348      	adds	r3, #72	; 0x48
 800039e:	443b      	add	r3, r7
 80003a0:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	4619      	mov	r1, r3
 80003a8:	4610      	mov	r0, r2
 80003aa:	f000 f9eb 	bl	8000784 <setupAnimation>
  for(i = 0 ; i < amount_pots_used ; i++)
 80003ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80003b2:	3301      	adds	r3, #1
 80003b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80003b8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80003bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d3e4      	bcc.n	800038e <main+0x1ae>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_ADC_Start_DMA(&hadc1,adc_val, MAX_AMOUNT_POTS);
 80003c4:	f107 0320 	add.w	r3, r7, #32
 80003c8:	2204      	movs	r2, #4
 80003ca:	4619      	mov	r1, r3
 80003cc:	4843      	ldr	r0, [pc, #268]	; (80004dc <main+0x2fc>)
 80003ce:	f000 fedf 	bl	8001190 <HAL_ADC_Start_DMA>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80003d2:	f04f 31ff 	mov.w	r1, #4294967295
 80003d6:	4841      	ldr	r0, [pc, #260]	; (80004dc <main+0x2fc>)
 80003d8:	f000 fdd4 	bl	8000f84 <HAL_ADC_PollForConversion>
	for(i = 0 ; i < amount_pots_used ; i++)
 80003dc:	2300      	movs	r3, #0
 80003de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80003e2:	e06d      	b.n	80004c0 <main+0x2e0>
	{
		temp = higherb - adc_val[i];
 80003e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	3348      	adds	r3, #72	; 0x48
 80003ec:	443b      	add	r3, r7
 80003ee:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80003f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80003f4:	1ad3      	subs	r3, r2, r3
 80003f6:	63fb      	str	r3, [r7, #60]	; 0x3c
		temp = temp * 21 / higherb;
 80003f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80003fa:	4613      	mov	r3, r2
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	4413      	add	r3, r2
 8000400:	00da      	lsls	r2, r3, #3
 8000402:	1ad2      	subs	r2, r2, r3
 8000404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000406:	fbb2 f3f3 	udiv	r3, r2, r3
 800040a:	63fb      	str	r3, [r7, #60]	; 0x3c
		temp += 2;
 800040c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800040e:	3302      	adds	r3, #2
 8000410:	63fb      	str	r3, [r7, #60]	; 0x3c

		if(temp != prev_led_value[i])
 8000412:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	3348      	adds	r3, #72	; 0x48
 800041a:	443b      	add	r3, r7
 800041c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000422:	429a      	cmp	r2, r3
 8000424:	d047      	beq.n	80004b6 <main+0x2d6>
		{
			// Prevents local flickering, switching between two states
			if(adc_val[i] < (prev_raw_adc_value[i] - FLICKER_MARGIN) || adc_val[i] > (prev_raw_adc_value[i] + FLICKER_MARGIN))
 8000426:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	3348      	adds	r3, #72	; 0x48
 800042e:	443b      	add	r3, r7
 8000430:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8000434:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	3348      	adds	r3, #72	; 0x48
 800043c:	443b      	add	r3, r7
 800043e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000442:	3b32      	subs	r3, #50	; 0x32
 8000444:	429a      	cmp	r2, r3
 8000446:	d310      	bcc.n	800046a <main+0x28a>
 8000448:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	3348      	adds	r3, #72	; 0x48
 8000450:	443b      	add	r3, r7
 8000452:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8000456:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	3348      	adds	r3, #72	; 0x48
 800045e:	443b      	add	r3, r7
 8000460:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000464:	3332      	adds	r3, #50	; 0x32
 8000466:	429a      	cmp	r2, r3
 8000468:	d925      	bls.n	80004b6 <main+0x2d6>
			{
				// Update led indication
				prev_led_value[i] = temp;
 800046a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	3348      	adds	r3, #72	; 0x48
 8000472:	443b      	add	r3, r7
 8000474:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000476:	f843 2c38 	str.w	r2, [r3, #-56]
				setOneLED(prev_led_value[i],addresses[i]);
 800047a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	3348      	adds	r3, #72	; 0x48
 8000482:	443b      	add	r3, r7
 8000484:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000488:	b2da      	uxtb	r2, r3
 800048a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800048e:	4910      	ldr	r1, [pc, #64]	; (80004d0 <main+0x2f0>)
 8000490:	5ccb      	ldrb	r3, [r1, r3]
 8000492:	4619      	mov	r1, r3
 8000494:	4610      	mov	r0, r2
 8000496:	f000 f995 	bl	80007c4 <setOneLED>
				prev_raw_adc_value[i] = adc_val[i];
 800049a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800049e:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	3348      	adds	r3, #72	; 0x48
 80004a6:	443b      	add	r3, r7
 80004a8:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80004ac:	008b      	lsls	r3, r1, #2
 80004ae:	3348      	adds	r3, #72	; 0x48
 80004b0:	443b      	add	r3, r7
 80004b2:	f843 2c48 	str.w	r2, [r3, #-72]
	for(i = 0 ; i < amount_pots_used ; i++)
 80004b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80004ba:	3301      	adds	r3, #1
 80004bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80004c0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80004c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d38b      	bcc.n	80003e4 <main+0x204>
	HAL_ADC_Start_DMA(&hadc1,adc_val, MAX_AMOUNT_POTS);
 80004cc:	e77a      	b.n	80003c4 <main+0x1e4>
 80004ce:	bf00      	nop
 80004d0:	08004854 	.word	0x08004854
 80004d4:	20000100 	.word	0x20000100
 80004d8:	080047fc 	.word	0x080047fc
 80004dc:	2000008c 	.word	0x2000008c

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b094      	sub	sp, #80	; 0x50
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ea:	2228      	movs	r2, #40	; 0x28
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f003 f9dc 	bl	80038ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000510:	2302      	movs	r3, #2
 8000512:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000514:	2301      	movs	r3, #1
 8000516:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000518:	2310      	movs	r3, #16
 800051a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800051c:	2300      	movs	r3, #0
 800051e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000524:	4618      	mov	r0, r3
 8000526:	f002 fa43 	bl	80029b0 <HAL_RCC_OscConfig>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000530:	f000 f9cc 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000534:	230f      	movs	r3, #15
 8000536:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000538:	2300      	movs	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 fcb0 	bl	8002eb4 <HAL_RCC_ClockConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800055a:	f000 f9b7 	bl	80008cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800055e:	2302      	movs	r3, #2
 8000560:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	4618      	mov	r0, r3
 800056a:	f002 fe31 	bl	80031d0 <HAL_RCCEx_PeriphCLKConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000574:	f000 f9aa 	bl	80008cc <Error_Handler>
  }
}
 8000578:	bf00      	nop
 800057a:	3750      	adds	r7, #80	; 0x50
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000590:	4b2e      	ldr	r3, [pc, #184]	; (800064c <MX_ADC1_Init+0xcc>)
 8000592:	4a2f      	ldr	r2, [pc, #188]	; (8000650 <MX_ADC1_Init+0xd0>)
 8000594:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000596:	4b2d      	ldr	r3, [pc, #180]	; (800064c <MX_ADC1_Init+0xcc>)
 8000598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800059c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059e:	4b2b      	ldr	r3, [pc, #172]	; (800064c <MX_ADC1_Init+0xcc>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <MX_ADC1_Init+0xcc>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005aa:	4b28      	ldr	r3, [pc, #160]	; (800064c <MX_ADC1_Init+0xcc>)
 80005ac:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b2:	4b26      	ldr	r3, [pc, #152]	; (800064c <MX_ADC1_Init+0xcc>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <MX_ADC1_Init+0xcc>)
 80005ba:	2204      	movs	r2, #4
 80005bc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005be:	4823      	ldr	r0, [pc, #140]	; (800064c <MX_ADC1_Init+0xcc>)
 80005c0:	f000 fc08 	bl	8000dd4 <HAL_ADC_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80005ca:	f000 f97f 	bl	80008cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80005d6:	2305      	movs	r3, #5
 80005d8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4619      	mov	r1, r3
 80005de:	481b      	ldr	r0, [pc, #108]	; (800064c <MX_ADC1_Init+0xcc>)
 80005e0:	f000 fed0 	bl	8001384 <HAL_ADC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005ea:	f000 f96f 	bl	80008cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4619      	mov	r1, r3
 80005fa:	4814      	ldr	r0, [pc, #80]	; (800064c <MX_ADC1_Init+0xcc>)
 80005fc:	f000 fec2 	bl	8001384 <HAL_ADC_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000606:	f000 f961 	bl	80008cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800060a:	2303      	movs	r3, #3
 800060c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800060e:	2303      	movs	r3, #3
 8000610:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4619      	mov	r1, r3
 8000616:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC1_Init+0xcc>)
 8000618:	f000 feb4 	bl	8001384 <HAL_ADC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000622:	f000 f953 	bl	80008cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000626:	2307      	movs	r3, #7
 8000628:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800062a:	2304      	movs	r3, #4
 800062c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4619      	mov	r1, r3
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <MX_ADC1_Init+0xcc>)
 8000634:	f000 fea6 	bl	8001384 <HAL_ADC_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800063e:	f000 f945 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000008c 	.word	0x2000008c
 8000650:	40012400 	.word	0x40012400

08000654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2C1_Init+0x50>)
 800065a:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <MX_I2C1_Init+0x54>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000660:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_I2C1_Init+0x58>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000692:	f001 fcf1 	bl	8002078 <HAL_I2C_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 f916 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000100 	.word	0x20000100
 80006a8:	40005400 	.word	0x40005400
 80006ac:	000186a0 	.word	0x000186a0

080006b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <MX_USART2_UART_Init+0x50>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006e8:	f002 fede 	bl	80034a8 <HAL_HalfDuplex_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006f2:	f000 f8eb 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000154 	.word	0x20000154
 8000700:	40004400 	.word	0x40004400

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_DMA_Init+0x38>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a0b      	ldr	r2, [pc, #44]	; (800073c <MX_DMA_Init+0x38>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_DMA_Init+0x38>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	200b      	movs	r0, #11
 8000728:	f001 f8fd 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800072c:	200b      	movs	r0, #11
 800072e:	f001 f916 	bl	800195e <HAL_NVIC_EnableIRQ>

}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_GPIO_Init+0x40>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <MX_GPIO_Init+0x40>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_GPIO_Init+0x40>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_GPIO_Init+0x40>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a07      	ldr	r2, [pc, #28]	; (8000780 <MX_GPIO_Init+0x40>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <MX_GPIO_Init+0x40>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	40021000 	.word	0x40021000

08000784 <setupAnimation>:

/* USER CODE BEGIN 4 */

void setupAnimation(uint8_t address, uint8_t led)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	for(i = 1 ; i <= led ; i++)
 8000794:	2301      	movs	r3, #1
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	e00b      	b.n	80007b2 <setupAnimation+0x2e>
	{
		setOneLED(i,address);
 800079a:	79fa      	ldrb	r2, [r7, #7]
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f80f 	bl	80007c4 <setOneLED>
		HAL_Delay(10);
 80007a6:	200a      	movs	r0, #10
 80007a8:	f000 faf0 	bl	8000d8c <HAL_Delay>
	for(i = 1 ; i <= led ; i++)
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	3301      	adds	r3, #1
 80007b0:	73fb      	strb	r3, [r7, #15]
 80007b2:	7bfa      	ldrb	r2, [r7, #15]
 80007b4:	79bb      	ldrb	r3, [r7, #6]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d9ef      	bls.n	800079a <setupAnimation+0x16>
	}
}
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <setOneLED>:

void setOneLED(uint8_t led, uint8_t addr)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af02      	add	r7, sp, #8
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	4613      	mov	r3, r2
 80007d2:	71bb      	strb	r3, [r7, #6]
	uint8_t data[12];

	if(led == 0)
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d12a      	bne.n	8000830 <setOneLED+0x6c>
	{
		//Clear all
		uint8_t i;

		for(i = 0 ; i < 10 ; i+=2)
 80007da:	2300      	movs	r3, #0
 80007dc:	75fb      	strb	r3, [r7, #23]
 80007de:	e013      	b.n	8000808 <setOneLED+0x44>
		{
			data[i] = (i/2)+1;
 80007e0:	7dfb      	ldrb	r3, [r7, #23]
 80007e2:	085b      	lsrs	r3, r3, #1
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	7dfb      	ldrb	r3, [r7, #23]
 80007e8:	3201      	adds	r2, #1
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	3318      	adds	r3, #24
 80007ee:	443b      	add	r3, r7
 80007f0:	f803 2c10 	strb.w	r2, [r3, #-16]
			data[i+1] = 0;
 80007f4:	7dfb      	ldrb	r3, [r7, #23]
 80007f6:	3301      	adds	r3, #1
 80007f8:	3318      	adds	r3, #24
 80007fa:	443b      	add	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	f803 2c10 	strb.w	r2, [r3, #-16]
		for(i = 0 ; i < 10 ; i+=2)
 8000802:	7dfb      	ldrb	r3, [r7, #23]
 8000804:	3302      	adds	r3, #2
 8000806:	75fb      	strb	r3, [r7, #23]
 8000808:	7dfb      	ldrb	r3, [r7, #23]
 800080a:	2b09      	cmp	r3, #9
 800080c:	d9e8      	bls.n	80007e0 <setOneLED+0x1c>
		}

		data[10] = 0x0c;
 800080e:	230c      	movs	r3, #12
 8000810:	74bb      	strb	r3, [r7, #18]
		data[11] = 0xaa;
 8000812:	23aa      	movs	r3, #170	; 0xaa
 8000814:	74fb      	strb	r3, [r7, #19]

		HAL_I2C_Master_Transmit(&hi2c1,addr << 1, data,12,HAL_MAX_DELAY);
 8000816:	79bb      	ldrb	r3, [r7, #6]
 8000818:	b29b      	uxth	r3, r3
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	b299      	uxth	r1, r3
 800081e:	f107 0208 	add.w	r2, r7, #8
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	230c      	movs	r3, #12
 800082a:	4825      	ldr	r0, [pc, #148]	; (80008c0 <setOneLED+0xfc>)
 800082c:	f001 fd68 	bl	8002300 <HAL_I2C_Master_Transmit>
	}

	if(led >= 1 && led <= 25)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d040      	beq.n	80008b8 <setOneLED+0xf4>
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b19      	cmp	r3, #25
 800083a:	d83d      	bhi.n	80008b8 <setOneLED+0xf4>
	{
		//Lit one LED
		uint8_t i;

		for(i = 0 ; i < 10 ; i+=2)
 800083c:	2300      	movs	r3, #0
 800083e:	75bb      	strb	r3, [r7, #22]
 8000840:	e013      	b.n	800086a <setOneLED+0xa6>
		{
			data[i] = (i/2)+1;
 8000842:	7dbb      	ldrb	r3, [r7, #22]
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	b2da      	uxtb	r2, r3
 8000848:	7dbb      	ldrb	r3, [r7, #22]
 800084a:	3201      	adds	r2, #1
 800084c:	b2d2      	uxtb	r2, r2
 800084e:	3318      	adds	r3, #24
 8000850:	443b      	add	r3, r7
 8000852:	f803 2c10 	strb.w	r2, [r3, #-16]
			data[i+1] = 0;
 8000856:	7dbb      	ldrb	r3, [r7, #22]
 8000858:	3301      	adds	r3, #1
 800085a:	3318      	adds	r3, #24
 800085c:	443b      	add	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	f803 2c10 	strb.w	r2, [r3, #-16]
		for(i = 0 ; i < 10 ; i+=2)
 8000864:	7dbb      	ldrb	r3, [r7, #22]
 8000866:	3302      	adds	r3, #2
 8000868:	75bb      	strb	r3, [r7, #22]
 800086a:	7dbb      	ldrb	r3, [r7, #22]
 800086c:	2b09      	cmp	r3, #9
 800086e:	d9e8      	bls.n	8000842 <setOneLED+0x7e>
		}

		data[(cols[led-1]*2)-1] = 0b00000001 << (rows[led-1]-1);
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	3b01      	subs	r3, #1
 8000874:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <setOneLED+0x100>)
 8000876:	5cd3      	ldrb	r3, [r2, r3]
 8000878:	3b01      	subs	r3, #1
 800087a:	2201      	movs	r2, #1
 800087c:	fa02 f103 	lsl.w	r1, r2, r3
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	3b01      	subs	r3, #1
 8000884:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <setOneLED+0x104>)
 8000886:	5cd3      	ldrb	r3, [r2, r3]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	3b01      	subs	r3, #1
 800088c:	b2ca      	uxtb	r2, r1
 800088e:	3318      	adds	r3, #24
 8000890:	443b      	add	r3, r7
 8000892:	f803 2c10 	strb.w	r2, [r3, #-16]

		data[10] = 0x0c;
 8000896:	230c      	movs	r3, #12
 8000898:	74bb      	strb	r3, [r7, #18]
		data[11] = 0xaa;
 800089a:	23aa      	movs	r3, #170	; 0xaa
 800089c:	74fb      	strb	r3, [r7, #19]

		HAL_I2C_Master_Transmit(&hi2c1,addr << 1, data,12,HAL_MAX_DELAY);
 800089e:	79bb      	ldrb	r3, [r7, #6]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	b299      	uxth	r1, r3
 80008a6:	f107 0208 	add.w	r2, r7, #8
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	230c      	movs	r3, #12
 80008b2:	4803      	ldr	r0, [pc, #12]	; (80008c0 <setOneLED+0xfc>)
 80008b4:	f001 fd24 	bl	8002300 <HAL_I2C_Master_Transmit>
	}
}
 80008b8:	bf00      	nop
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000100 	.word	0x20000100
 80008c4:	0800481c 	.word	0x0800481c
 80008c8:	08004838 	.word	0x08004838

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_MspInit+0x5c>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	4a14      	ldr	r2, [pc, #80]	; (8000934 <HAL_MspInit+0x5c>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6193      	str	r3, [r2, #24]
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_MspInit+0x5c>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_MspInit+0x5c>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <HAL_MspInit+0x5c>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	61d3      	str	r3, [r2, #28]
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <HAL_MspInit+0x5c>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_MspInit+0x60>)
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_MspInit+0x60>)
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	40021000 	.word	0x40021000
 8000938:	40010000 	.word	0x40010000

0800093c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a28      	ldr	r2, [pc, #160]	; (80009f8 <HAL_ADC_MspInit+0xbc>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d149      	bne.n	80009f0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <HAL_ADC_MspInit+0xc0>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a26      	ldr	r2, [pc, #152]	; (80009fc <HAL_ADC_MspInit+0xc0>)
 8000962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <HAL_ADC_MspInit+0xc0>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <HAL_ADC_MspInit+0xc0>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a20      	ldr	r2, [pc, #128]	; (80009fc <HAL_ADC_MspInit+0xc0>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <HAL_ADC_MspInit+0xc0>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 800098c:	238b      	movs	r3, #139	; 0x8b
 800098e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000990:	2303      	movs	r3, #3
 8000992:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4619      	mov	r1, r3
 800099a:	4819      	ldr	r0, [pc, #100]	; (8000a00 <HAL_ADC_MspInit+0xc4>)
 800099c:	f001 f9e8 	bl	8001d70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_ADC_MspInit+0xc8>)
 80009a2:	4a19      	ldr	r2, [pc, #100]	; (8000a08 <HAL_ADC_MspInit+0xcc>)
 80009a4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_ADC_MspInit+0xc8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_ADC_MspInit+0xc8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_ADC_MspInit+0xc8>)
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_ADC_MspInit+0xc8>)
 80009ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_ADC_MspInit+0xc8>)
 80009c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_ADC_MspInit+0xc8>)
 80009ca:	2220      	movs	r2, #32
 80009cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_ADC_MspInit+0xc8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <HAL_ADC_MspInit+0xc8>)
 80009d6:	f000 ffdd 	bl	8001994 <HAL_DMA_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80009e0:	f7ff ff74 	bl	80008cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_ADC_MspInit+0xc8>)
 80009e8:	621a      	str	r2, [r3, #32]
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_ADC_MspInit+0xc8>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009f0:	bf00      	nop
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40012400 	.word	0x40012400
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010800 	.word	0x40010800
 8000a04:	200000bc 	.word	0x200000bc
 8000a08:	40020008 	.word	0x40020008

08000a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a15      	ldr	r2, [pc, #84]	; (8000a7c <HAL_I2C_MspInit+0x70>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d123      	bne.n	8000a74 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a32:	f043 0308 	orr.w	r3, r3, #8
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0308 	and.w	r3, r3, #8
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a44:	23c0      	movs	r3, #192	; 0xc0
 8000a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a48:	2312      	movs	r3, #18
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	480b      	ldr	r0, [pc, #44]	; (8000a84 <HAL_I2C_MspInit+0x78>)
 8000a58:	f001 f98a 	bl	8001d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a66:	61d3      	str	r3, [r2, #28]
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a6a:	69db      	ldr	r3, [r3, #28]
 8000a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a74:	bf00      	nop
 8000a76:	3720      	adds	r7, #32
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40010c00 	.word	0x40010c00

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <HAL_UART_MspInit+0x70>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d123      	bne.n	8000af0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_UART_MspInit+0x74>)
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	4a13      	ldr	r2, [pc, #76]	; (8000afc <HAL_UART_MspInit+0x74>)
 8000aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab2:	61d3      	str	r3, [r2, #28]
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_UART_MspInit+0x74>)
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_UART_MspInit+0x74>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <HAL_UART_MspInit+0x74>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_UART_MspInit+0x74>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000adc:	2312      	movs	r3, #18
 8000ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <HAL_UART_MspInit+0x78>)
 8000aec:	f001 f940 	bl	8001d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40004400 	.word	0x40004400
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010800 	.word	0x40010800

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <NMI_Handler+0x4>

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr

08000b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4a:	f000 f903 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <DMA1_Channel1_IRQHandler+0x10>)
 8000b5a:	f000 ffd5 	bl	8001b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000bc 	.word	0x200000bc

08000b68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	e00a      	b.n	8000b90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b7a:	f3af 8000 	nop.w
 8000b7e:	4601      	mov	r1, r0
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	60ba      	str	r2, [r7, #8]
 8000b86:	b2ca      	uxtb	r2, r1
 8000b88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dbf0      	blt.n	8000b7a <_read+0x12>
  }

  return len;
 8000b98:	687b      	ldr	r3, [r7, #4]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc8:	605a      	str	r2, [r3, #4]
  return 0;
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <_isatty>:

int _isatty(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr

08000bea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b085      	sub	sp, #20
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
	...

08000c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c0c:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <_sbrk+0x5c>)
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <_sbrk+0x60>)
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <_sbrk+0x64>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <_sbrk+0x68>)
 8000c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d207      	bcs.n	8000c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c34:	f002 fe10 	bl	8003858 <__errno>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	e009      	b.n	8000c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <_sbrk+0x64>)
 8000c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20005000 	.word	0x20005000
 8000c64:	00000400 	.word	0x00000400
 8000c68:	2000019c 	.word	0x2000019c
 8000c6c:	200001b8 	.word	0x200001b8

08000c70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c7c:	f7ff fff8 	bl	8000c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c80:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c82:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c84:	4a0c      	ldr	r2, [pc, #48]	; (8000cb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c98:	4c09      	ldr	r4, [pc, #36]	; (8000cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f002 fddd 	bl	8003864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000caa:	f7ff fa99 	bl	80001e0 <main>
  bx lr
 8000cae:	4770      	bx	lr
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cb8:	08004938 	.word	0x08004938
  ldr r2, =_sbss
 8000cbc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cc0:	200001b4 	.word	0x200001b4

08000cc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC1_2_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x28>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x28>)
 8000cd2:	f043 0310 	orr.w	r3, r3, #16
 8000cd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 fe19 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	200f      	movs	r0, #15
 8000ce0:	f000 f808 	bl	8000cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff fdf8 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40022000 	.word	0x40022000

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x54>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x58>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fe31 	bl	800197a <HAL_SYSTICK_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00e      	b.n	8000d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d80a      	bhi.n	8000d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f000 fdf9 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <HAL_InitTick+0x5c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000004 	.word	0x20000004

08000d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_IncTick+0x1c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_IncTick+0x20>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a03      	ldr	r2, [pc, #12]	; (8000d74 <HAL_IncTick+0x20>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	20000008 	.word	0x20000008
 8000d74:	200001a0 	.word	0x200001a0

08000d78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b02      	ldr	r3, [pc, #8]	; (8000d88 <HAL_GetTick+0x10>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	200001a0 	.word	0x200001a0

08000d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d94:	f7ff fff0 	bl	8000d78 <HAL_GetTick>
 8000d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da4:	d005      	beq.n	8000db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_Delay+0x44>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4413      	add	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000db2:	bf00      	nop
 8000db4:	f7ff ffe0 	bl	8000d78 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d8f7      	bhi.n	8000db4 <HAL_Delay+0x28>
  {
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008

08000dd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d101      	bne.n	8000df6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e0be      	b.n	8000f74 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d109      	bne.n	8000e18 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fd92 	bl	800093c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 fc05 	bl	8001628 <ADC_ConversionStop_Disable>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e26:	f003 0310 	and.w	r3, r3, #16
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f040 8099 	bne.w	8000f62 <HAL_ADC_Init+0x18e>
 8000e30:	7dfb      	ldrb	r3, [r7, #23]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f040 8095 	bne.w	8000f62 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e40:	f023 0302 	bic.w	r3, r3, #2
 8000e44:	f043 0202 	orr.w	r2, r3, #2
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e54:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7b1b      	ldrb	r3, [r3, #12]
 8000e5a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e5c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e6c:	d003      	beq.n	8000e76 <HAL_ADC_Init+0xa2>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d102      	bne.n	8000e7c <HAL_ADC_Init+0xa8>
 8000e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e7a:	e000      	b.n	8000e7e <HAL_ADC_Init+0xaa>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7d1b      	ldrb	r3, [r3, #20]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d119      	bne.n	8000ec0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7b1b      	ldrb	r3, [r3, #12]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d109      	bne.n	8000ea8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	035a      	lsls	r2, r3, #13
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	e00b      	b.n	8000ec0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eac:	f043 0220 	orr.w	r2, r3, #32
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb8:	f043 0201 	orr.w	r2, r3, #1
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <HAL_ADC_Init+0x1a8>)
 8000edc:	4013      	ands	r3, r2
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	6812      	ldr	r2, [r2, #0]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	430b      	orrs	r3, r1
 8000ee6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ef0:	d003      	beq.n	8000efa <HAL_ADC_Init+0x126>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d104      	bne.n	8000f04 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	051b      	lsls	r3, r3, #20
 8000f02:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_ADC_Init+0x1ac>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d10b      	bne.n	8000f40 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f32:	f023 0303 	bic.w	r3, r3, #3
 8000f36:	f043 0201 	orr.w	r2, r3, #1
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f3e:	e018      	b.n	8000f72 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f44:	f023 0312 	bic.w	r3, r3, #18
 8000f48:	f043 0210 	orr.w	r2, r3, #16
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f54:	f043 0201 	orr.w	r2, r3, #1
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f60:	e007      	b.n	8000f72 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f66:	f043 0210 	orr.w	r2, r3, #16
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	ffe1f7fd 	.word	0xffe1f7fd
 8000f80:	ff1f0efe 	.word	0xff1f0efe

08000f84 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f9a:	f7ff feed 	bl	8000d78 <HAL_GetTick>
 8000f9e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00b      	beq.n	8000fc6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb2:	f043 0220 	orr.w	r2, r3, #32
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e0d3      	b.n	800116e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d131      	bne.n	8001038 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d12a      	bne.n	8001038 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fe2:	e021      	b.n	8001028 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fea:	d01d      	beq.n	8001028 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d007      	beq.n	8001002 <HAL_ADC_PollForConversion+0x7e>
 8000ff2:	f7ff fec1 	bl	8000d78 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d212      	bcs.n	8001028 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10b      	bne.n	8001028 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	f043 0204 	orr.w	r2, r3, #4
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e0a2      	b.n	800116e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0d6      	beq.n	8000fe4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001036:	e070      	b.n	800111a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001038:	4b4f      	ldr	r3, [pc, #316]	; (8001178 <HAL_ADC_PollForConversion+0x1f4>)
 800103a:	681c      	ldr	r4, [r3, #0]
 800103c:	2002      	movs	r0, #2
 800103e:	f002 f97d 	bl	800333c <HAL_RCCEx_GetPeriphCLKFreq>
 8001042:	4603      	mov	r3, r0
 8001044:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6919      	ldr	r1, [r3, #16]
 800104e:	4b4b      	ldr	r3, [pc, #300]	; (800117c <HAL_ADC_PollForConversion+0x1f8>)
 8001050:	400b      	ands	r3, r1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d118      	bne.n	8001088 <HAL_ADC_PollForConversion+0x104>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68d9      	ldr	r1, [r3, #12]
 800105c:	4b48      	ldr	r3, [pc, #288]	; (8001180 <HAL_ADC_PollForConversion+0x1fc>)
 800105e:	400b      	ands	r3, r1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d111      	bne.n	8001088 <HAL_ADC_PollForConversion+0x104>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6919      	ldr	r1, [r3, #16]
 800106a:	4b46      	ldr	r3, [pc, #280]	; (8001184 <HAL_ADC_PollForConversion+0x200>)
 800106c:	400b      	ands	r3, r1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d108      	bne.n	8001084 <HAL_ADC_PollForConversion+0x100>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68d9      	ldr	r1, [r3, #12]
 8001078:	4b43      	ldr	r3, [pc, #268]	; (8001188 <HAL_ADC_PollForConversion+0x204>)
 800107a:	400b      	ands	r3, r1
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_ADC_PollForConversion+0x100>
 8001080:	2314      	movs	r3, #20
 8001082:	e020      	b.n	80010c6 <HAL_ADC_PollForConversion+0x142>
 8001084:	2329      	movs	r3, #41	; 0x29
 8001086:	e01e      	b.n	80010c6 <HAL_ADC_PollForConversion+0x142>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6919      	ldr	r1, [r3, #16]
 800108e:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <HAL_ADC_PollForConversion+0x200>)
 8001090:	400b      	ands	r3, r1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d106      	bne.n	80010a4 <HAL_ADC_PollForConversion+0x120>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68d9      	ldr	r1, [r3, #12]
 800109c:	4b3a      	ldr	r3, [pc, #232]	; (8001188 <HAL_ADC_PollForConversion+0x204>)
 800109e:	400b      	ands	r3, r1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00d      	beq.n	80010c0 <HAL_ADC_PollForConversion+0x13c>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6919      	ldr	r1, [r3, #16]
 80010aa:	4b38      	ldr	r3, [pc, #224]	; (800118c <HAL_ADC_PollForConversion+0x208>)
 80010ac:	400b      	ands	r3, r1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d108      	bne.n	80010c4 <HAL_ADC_PollForConversion+0x140>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68d9      	ldr	r1, [r3, #12]
 80010b8:	4b34      	ldr	r3, [pc, #208]	; (800118c <HAL_ADC_PollForConversion+0x208>)
 80010ba:	400b      	ands	r3, r1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <HAL_ADC_PollForConversion+0x140>
 80010c0:	2354      	movs	r3, #84	; 0x54
 80010c2:	e000      	b.n	80010c6 <HAL_ADC_PollForConversion+0x142>
 80010c4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80010c6:	fb02 f303 	mul.w	r3, r2, r3
 80010ca:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010cc:	e021      	b.n	8001112 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d01a      	beq.n	800110c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d007      	beq.n	80010ec <HAL_ADC_PollForConversion+0x168>
 80010dc:	f7ff fe4c 	bl	8000d78 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d20f      	bcs.n	800110c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d90b      	bls.n	800110c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	f043 0204 	orr.w	r2, r3, #4
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e030      	b.n	800116e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3301      	adds	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	429a      	cmp	r2, r3
 8001118:	d8d9      	bhi.n	80010ce <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f06f 0212 	mvn.w	r2, #18
 8001122:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800113a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800113e:	d115      	bne.n	800116c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001144:	2b00      	cmp	r3, #0
 8001146:	d111      	bne.n	800116c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d105      	bne.n	800116c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	f043 0201 	orr.w	r2, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	371c      	adds	r7, #28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd90      	pop	{r4, r7, pc}
 8001176:	bf00      	nop
 8001178:	20000000 	.word	0x20000000
 800117c:	24924924 	.word	0x24924924
 8001180:	00924924 	.word	0x00924924
 8001184:	12492492 	.word	0x12492492
 8001188:	00492492 	.word	0x00492492
 800118c:	00249249 	.word	0x00249249

08001190 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a64      	ldr	r2, [pc, #400]	; (8001338 <HAL_ADC_Start_DMA+0x1a8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d004      	beq.n	80011b4 <HAL_ADC_Start_DMA+0x24>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a63      	ldr	r2, [pc, #396]	; (800133c <HAL_ADC_Start_DMA+0x1ac>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d106      	bne.n	80011c2 <HAL_ADC_Start_DMA+0x32>
 80011b4:	4b60      	ldr	r3, [pc, #384]	; (8001338 <HAL_ADC_Start_DMA+0x1a8>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f040 80b3 	bne.w	8001328 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d101      	bne.n	80011d0 <HAL_ADC_Start_DMA+0x40>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e0ae      	b.n	800132e <HAL_ADC_Start_DMA+0x19e>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f000 f9cb 	bl	8001574 <ADC_Enable>
 80011de:	4603      	mov	r3, r0
 80011e0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f040 809a 	bne.w	800131e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011f2:	f023 0301 	bic.w	r3, r3, #1
 80011f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a4e      	ldr	r2, [pc, #312]	; (800133c <HAL_ADC_Start_DMA+0x1ac>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d105      	bne.n	8001214 <HAL_ADC_Start_DMA+0x84>
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <HAL_ADC_Start_DMA+0x1a8>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d115      	bne.n	8001240 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800122a:	2b00      	cmp	r3, #0
 800122c:	d026      	beq.n	800127c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001232:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001236:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800123e:	e01d      	b.n	800127c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a39      	ldr	r2, [pc, #228]	; (8001338 <HAL_ADC_Start_DMA+0x1a8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d004      	beq.n	8001260 <HAL_ADC_Start_DMA+0xd0>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a38      	ldr	r2, [pc, #224]	; (800133c <HAL_ADC_Start_DMA+0x1ac>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d10d      	bne.n	800127c <HAL_ADC_Start_DMA+0xec>
 8001260:	4b35      	ldr	r3, [pc, #212]	; (8001338 <HAL_ADC_Start_DMA+0x1a8>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001268:	2b00      	cmp	r3, #0
 800126a:	d007      	beq.n	800127c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001270:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001274:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	f023 0206 	bic.w	r2, r3, #6
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
 8001294:	e002      	b.n	800129c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	4a25      	ldr	r2, [pc, #148]	; (8001340 <HAL_ADC_Start_DMA+0x1b0>)
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4a24      	ldr	r2, [pc, #144]	; (8001344 <HAL_ADC_Start_DMA+0x1b4>)
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4a23      	ldr	r2, [pc, #140]	; (8001348 <HAL_ADC_Start_DMA+0x1b8>)
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f06f 0202 	mvn.w	r2, #2
 80012c4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012d4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6a18      	ldr	r0, [r3, #32]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	334c      	adds	r3, #76	; 0x4c
 80012e0:	4619      	mov	r1, r3
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f000 fbaf 	bl	8001a48 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80012f4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012f8:	d108      	bne.n	800130c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001308:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800130a:	e00f      	b.n	800132c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800131a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800131c:	e006      	b.n	800132c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001326:	e001      	b.n	800132c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800132c:	7dfb      	ldrb	r3, [r7, #23]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40012400 	.word	0x40012400
 800133c:	40012800 	.word	0x40012800
 8001340:	080016ab 	.word	0x080016ab
 8001344:	08001727 	.word	0x08001727
 8001348:	08001743 	.word	0x08001743

0800134c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
	...

08001384 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x20>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e0dc      	b.n	800155e <HAL_ADC_ConfigChannel+0x1da>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b06      	cmp	r3, #6
 80013b2:	d81c      	bhi.n	80013ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	3b05      	subs	r3, #5
 80013c6:	221f      	movs	r2, #31
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	4019      	ands	r1, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b05      	subs	r3, #5
 80013e0:	fa00 f203 	lsl.w	r2, r0, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34
 80013ec:	e03c      	b.n	8001468 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	d81c      	bhi.n	8001430 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	3b23      	subs	r3, #35	; 0x23
 8001408:	221f      	movs	r2, #31
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	4019      	ands	r1, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3b23      	subs	r3, #35	; 0x23
 8001422:	fa00 f203 	lsl.w	r2, r0, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	631a      	str	r2, [r3, #48]	; 0x30
 800142e:	e01b      	b.n	8001468 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	3b41      	subs	r3, #65	; 0x41
 8001442:	221f      	movs	r2, #31
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	4019      	ands	r1, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b41      	subs	r3, #65	; 0x41
 800145c:	fa00 f203 	lsl.w	r2, r0, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b09      	cmp	r3, #9
 800146e:	d91c      	bls.n	80014aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68d9      	ldr	r1, [r3, #12]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	3b1e      	subs	r3, #30
 8001482:	2207      	movs	r2, #7
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	4019      	ands	r1, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	6898      	ldr	r0, [r3, #8]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	3b1e      	subs	r3, #30
 800149c:	fa00 f203 	lsl.w	r2, r0, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	e019      	b.n	80014de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6919      	ldr	r1, [r3, #16]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	2207      	movs	r2, #7
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	4019      	ands	r1, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	6898      	ldr	r0, [r3, #8]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	fa00 f203 	lsl.w	r2, r0, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d003      	beq.n	80014ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014ea:	2b11      	cmp	r3, #17
 80014ec:	d132      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <HAL_ADC_ConfigChannel+0x1e4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d125      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d126      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001514:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b10      	cmp	r3, #16
 800151c:	d11a      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_ADC_ConfigChannel+0x1e8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a13      	ldr	r2, [pc, #76]	; (8001570 <HAL_ADC_ConfigChannel+0x1ec>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	0c9a      	lsrs	r2, r3, #18
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001534:	e002      	b.n	800153c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3b01      	subs	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f9      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x1b2>
 8001542:	e007      	b.n	8001554 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001548:	f043 0220 	orr.w	r2, r3, #32
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40012400 	.word	0x40012400
 800156c:	20000000 	.word	0x20000000
 8001570:	431bde83 	.word	0x431bde83

08001574 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b01      	cmp	r3, #1
 8001590:	d040      	beq.n	8001614 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0201 	orr.w	r2, r2, #1
 80015a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <ADC_Enable+0xac>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <ADC_Enable+0xb0>)
 80015a8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ac:	0c9b      	lsrs	r3, r3, #18
 80015ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015b0:	e002      	b.n	80015b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f9      	bne.n	80015b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015be:	f7ff fbdb 	bl	8000d78 <HAL_GetTick>
 80015c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015c4:	e01f      	b.n	8001606 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015c6:	f7ff fbd7 	bl	8000d78 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d918      	bls.n	8001606 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d011      	beq.n	8001606 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	f043 0210 	orr.w	r2, r3, #16
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	f043 0201 	orr.w	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e007      	b.n	8001616 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b01      	cmp	r3, #1
 8001612:	d1d8      	bne.n	80015c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000000 	.word	0x20000000
 8001624:	431bde83 	.word	0x431bde83

08001628 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b01      	cmp	r3, #1
 8001640:	d12e      	bne.n	80016a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0201 	bic.w	r2, r2, #1
 8001650:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001652:	f7ff fb91 	bl	8000d78 <HAL_GetTick>
 8001656:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001658:	e01b      	b.n	8001692 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800165a:	f7ff fb8d 	bl	8000d78 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d914      	bls.n	8001692 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10d      	bne.n	8001692 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	f043 0210 	orr.w	r2, r3, #16
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	f043 0201 	orr.w	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e007      	b.n	80016a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b01      	cmp	r3, #1
 800169e:	d0dc      	beq.n	800165a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d127      	bne.n	8001714 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016de:	d115      	bne.n	800170c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d111      	bne.n	800170c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f7ff fe1d 	bl	800134c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001712:	e004      	b.n	800171e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	4798      	blx	r3
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f7ff fe12 	bl	800135e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	f043 0204 	orr.w	r2, r3, #4
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff fe01 	bl	8001370 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4906      	ldr	r1, [pc, #24]	; (8001810 <__NVIC_EnableIRQ+0x34>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	; (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	; (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	; 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff90 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff2d 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff42 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff90 	bl	8001868 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5f 	bl	8001814 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff35 	bl	80017dc <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffa2 	bl	80018cc <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e043      	b.n	8001a32 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_DMA_Init+0xa8>)
 80019b2:	4413      	add	r3, r2
 80019b4:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <HAL_DMA_Init+0xac>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	091b      	lsrs	r3, r3, #4
 80019bc:	009a      	lsls	r2, r3, #2
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <HAL_DMA_Init+0xb0>)
 80019c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80019e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	bffdfff8 	.word	0xbffdfff8
 8001a40:	cccccccd 	.word	0xcccccccd
 8001a44:	40020000 	.word	0x40020000

08001a48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_DMA_Start_IT+0x20>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e04b      	b.n	8001b00 <HAL_DMA_Start_IT+0xb8>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d13a      	bne.n	8001af2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0201 	bic.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	68b9      	ldr	r1, [r7, #8]
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 f937 	bl	8001d14 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 020e 	orr.w	r2, r2, #14
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e00f      	b.n	8001ae0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0204 	bic.w	r2, r2, #4
 8001ace:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 020a 	orr.w	r2, r2, #10
 8001ade:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e005      	b.n	8001afe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001afa:	2302      	movs	r3, #2
 8001afc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	2204      	movs	r2, #4
 8001b26:	409a      	lsls	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d04f      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0xc8>
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d04a      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0320 	and.w	r3, r3, #32
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0204 	bic.w	r2, r2, #4
 8001b56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a66      	ldr	r2, [pc, #408]	; (8001cf8 <HAL_DMA_IRQHandler+0x1f0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d029      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xae>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a65      	ldr	r2, [pc, #404]	; (8001cfc <HAL_DMA_IRQHandler+0x1f4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d022      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xaa>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a63      	ldr	r2, [pc, #396]	; (8001d00 <HAL_DMA_IRQHandler+0x1f8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d01a      	beq.n	8001bac <HAL_DMA_IRQHandler+0xa4>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a62      	ldr	r2, [pc, #392]	; (8001d04 <HAL_DMA_IRQHandler+0x1fc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d012      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x9e>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a60      	ldr	r2, [pc, #384]	; (8001d08 <HAL_DMA_IRQHandler+0x200>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00a      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x98>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a5f      	ldr	r2, [pc, #380]	; (8001d0c <HAL_DMA_IRQHandler+0x204>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d102      	bne.n	8001b9a <HAL_DMA_IRQHandler+0x92>
 8001b94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b98:	e00e      	b.n	8001bb8 <HAL_DMA_IRQHandler+0xb0>
 8001b9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b9e:	e00b      	b.n	8001bb8 <HAL_DMA_IRQHandler+0xb0>
 8001ba0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ba4:	e008      	b.n	8001bb8 <HAL_DMA_IRQHandler+0xb0>
 8001ba6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001baa:	e005      	b.n	8001bb8 <HAL_DMA_IRQHandler+0xb0>
 8001bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb0:	e002      	b.n	8001bb8 <HAL_DMA_IRQHandler+0xb0>
 8001bb2:	2340      	movs	r3, #64	; 0x40
 8001bb4:	e000      	b.n	8001bb8 <HAL_DMA_IRQHandler+0xb0>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	4a55      	ldr	r2, [pc, #340]	; (8001d10 <HAL_DMA_IRQHandler+0x208>)
 8001bba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8094 	beq.w	8001cee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bce:	e08e      	b.n	8001cee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d056      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x186>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d051      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10b      	bne.n	8001c10 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 020a 	bic.w	r2, r2, #10
 8001c06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a38      	ldr	r2, [pc, #224]	; (8001cf8 <HAL_DMA_IRQHandler+0x1f0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d029      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x166>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a37      	ldr	r2, [pc, #220]	; (8001cfc <HAL_DMA_IRQHandler+0x1f4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d022      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x162>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a35      	ldr	r2, [pc, #212]	; (8001d00 <HAL_DMA_IRQHandler+0x1f8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01a      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x15c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a34      	ldr	r2, [pc, #208]	; (8001d04 <HAL_DMA_IRQHandler+0x1fc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d012      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x156>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a32      	ldr	r2, [pc, #200]	; (8001d08 <HAL_DMA_IRQHandler+0x200>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00a      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x150>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a31      	ldr	r2, [pc, #196]	; (8001d0c <HAL_DMA_IRQHandler+0x204>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d102      	bne.n	8001c52 <HAL_DMA_IRQHandler+0x14a>
 8001c4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c50:	e00e      	b.n	8001c70 <HAL_DMA_IRQHandler+0x168>
 8001c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c56:	e00b      	b.n	8001c70 <HAL_DMA_IRQHandler+0x168>
 8001c58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c5c:	e008      	b.n	8001c70 <HAL_DMA_IRQHandler+0x168>
 8001c5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c62:	e005      	b.n	8001c70 <HAL_DMA_IRQHandler+0x168>
 8001c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c68:	e002      	b.n	8001c70 <HAL_DMA_IRQHandler+0x168>
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	e000      	b.n	8001c70 <HAL_DMA_IRQHandler+0x168>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	4a27      	ldr	r2, [pc, #156]	; (8001d10 <HAL_DMA_IRQHandler+0x208>)
 8001c72:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d034      	beq.n	8001cee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c8c:	e02f      	b.n	8001cee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	2208      	movs	r2, #8
 8001c94:	409a      	lsls	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d028      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x1e8>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d023      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 020e 	bic.w	r2, r2, #14
 8001cb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d004      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
    }
  }
  return;
 8001cee:	bf00      	nop
 8001cf0:	bf00      	nop
}
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40020008 	.word	0x40020008
 8001cfc:	4002001c 	.word	0x4002001c
 8001d00:	40020030 	.word	0x40020030
 8001d04:	40020044 	.word	0x40020044
 8001d08:	40020058 	.word	0x40020058
 8001d0c:	4002006c 	.word	0x4002006c
 8001d10:	40020000 	.word	0x40020000

08001d14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d108      	bne.n	8001d54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d52:	e007      	b.n	8001d64 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	60da      	str	r2, [r3, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
	...

08001d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b08b      	sub	sp, #44	; 0x2c
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d82:	e169      	b.n	8002058 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d84:	2201      	movs	r2, #1
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	f040 8158 	bne.w	8002052 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4a9a      	ldr	r2, [pc, #616]	; (8002010 <HAL_GPIO_Init+0x2a0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d05e      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
 8001dac:	4a98      	ldr	r2, [pc, #608]	; (8002010 <HAL_GPIO_Init+0x2a0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d875      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001db2:	4a98      	ldr	r2, [pc, #608]	; (8002014 <HAL_GPIO_Init+0x2a4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d058      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
 8001db8:	4a96      	ldr	r2, [pc, #600]	; (8002014 <HAL_GPIO_Init+0x2a4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d86f      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001dbe:	4a96      	ldr	r2, [pc, #600]	; (8002018 <HAL_GPIO_Init+0x2a8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d052      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
 8001dc4:	4a94      	ldr	r2, [pc, #592]	; (8002018 <HAL_GPIO_Init+0x2a8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d869      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001dca:	4a94      	ldr	r2, [pc, #592]	; (800201c <HAL_GPIO_Init+0x2ac>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d04c      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
 8001dd0:	4a92      	ldr	r2, [pc, #584]	; (800201c <HAL_GPIO_Init+0x2ac>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d863      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001dd6:	4a92      	ldr	r2, [pc, #584]	; (8002020 <HAL_GPIO_Init+0x2b0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d046      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
 8001ddc:	4a90      	ldr	r2, [pc, #576]	; (8002020 <HAL_GPIO_Init+0x2b0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d85d      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001de2:	2b12      	cmp	r3, #18
 8001de4:	d82a      	bhi.n	8001e3c <HAL_GPIO_Init+0xcc>
 8001de6:	2b12      	cmp	r3, #18
 8001de8:	d859      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001dea:	a201      	add	r2, pc, #4	; (adr r2, 8001df0 <HAL_GPIO_Init+0x80>)
 8001dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df0:	08001e6b 	.word	0x08001e6b
 8001df4:	08001e45 	.word	0x08001e45
 8001df8:	08001e57 	.word	0x08001e57
 8001dfc:	08001e99 	.word	0x08001e99
 8001e00:	08001e9f 	.word	0x08001e9f
 8001e04:	08001e9f 	.word	0x08001e9f
 8001e08:	08001e9f 	.word	0x08001e9f
 8001e0c:	08001e9f 	.word	0x08001e9f
 8001e10:	08001e9f 	.word	0x08001e9f
 8001e14:	08001e9f 	.word	0x08001e9f
 8001e18:	08001e9f 	.word	0x08001e9f
 8001e1c:	08001e9f 	.word	0x08001e9f
 8001e20:	08001e9f 	.word	0x08001e9f
 8001e24:	08001e9f 	.word	0x08001e9f
 8001e28:	08001e9f 	.word	0x08001e9f
 8001e2c:	08001e9f 	.word	0x08001e9f
 8001e30:	08001e9f 	.word	0x08001e9f
 8001e34:	08001e4d 	.word	0x08001e4d
 8001e38:	08001e61 	.word	0x08001e61
 8001e3c:	4a79      	ldr	r2, [pc, #484]	; (8002024 <HAL_GPIO_Init+0x2b4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e42:	e02c      	b.n	8001e9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	623b      	str	r3, [r7, #32]
          break;
 8001e4a:	e029      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	3304      	adds	r3, #4
 8001e52:	623b      	str	r3, [r7, #32]
          break;
 8001e54:	e024      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	3308      	adds	r3, #8
 8001e5c:	623b      	str	r3, [r7, #32]
          break;
 8001e5e:	e01f      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	330c      	adds	r3, #12
 8001e66:	623b      	str	r3, [r7, #32]
          break;
 8001e68:	e01a      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e72:	2304      	movs	r3, #4
 8001e74:	623b      	str	r3, [r7, #32]
          break;
 8001e76:	e013      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d105      	bne.n	8001e8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e80:	2308      	movs	r3, #8
 8001e82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	611a      	str	r2, [r3, #16]
          break;
 8001e8a:	e009      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	615a      	str	r2, [r3, #20]
          break;
 8001e96:	e003      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
          break;
 8001e9c:	e000      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          break;
 8001e9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2bff      	cmp	r3, #255	; 0xff
 8001ea4:	d801      	bhi.n	8001eaa <HAL_GPIO_Init+0x13a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	e001      	b.n	8001eae <HAL_GPIO_Init+0x13e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3304      	adds	r3, #4
 8001eae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2bff      	cmp	r3, #255	; 0xff
 8001eb4:	d802      	bhi.n	8001ebc <HAL_GPIO_Init+0x14c>
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	e002      	b.n	8001ec2 <HAL_GPIO_Init+0x152>
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	3b08      	subs	r3, #8
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	210f      	movs	r1, #15
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	6a39      	ldr	r1, [r7, #32]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	431a      	orrs	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80b1 	beq.w	8002052 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef0:	4b4d      	ldr	r3, [pc, #308]	; (8002028 <HAL_GPIO_Init+0x2b8>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a4c      	ldr	r2, [pc, #304]	; (8002028 <HAL_GPIO_Init+0x2b8>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6193      	str	r3, [r2, #24]
 8001efc:	4b4a      	ldr	r3, [pc, #296]	; (8002028 <HAL_GPIO_Init+0x2b8>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f08:	4a48      	ldr	r2, [pc, #288]	; (800202c <HAL_GPIO_Init+0x2bc>)
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	220f      	movs	r2, #15
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a40      	ldr	r2, [pc, #256]	; (8002030 <HAL_GPIO_Init+0x2c0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <HAL_GPIO_Init+0x1ec>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3f      	ldr	r2, [pc, #252]	; (8002034 <HAL_GPIO_Init+0x2c4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00d      	beq.n	8001f58 <HAL_GPIO_Init+0x1e8>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3e      	ldr	r2, [pc, #248]	; (8002038 <HAL_GPIO_Init+0x2c8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d007      	beq.n	8001f54 <HAL_GPIO_Init+0x1e4>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3d      	ldr	r2, [pc, #244]	; (800203c <HAL_GPIO_Init+0x2cc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d101      	bne.n	8001f50 <HAL_GPIO_Init+0x1e0>
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e006      	b.n	8001f5e <HAL_GPIO_Init+0x1ee>
 8001f50:	2304      	movs	r3, #4
 8001f52:	e004      	b.n	8001f5e <HAL_GPIO_Init+0x1ee>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e002      	b.n	8001f5e <HAL_GPIO_Init+0x1ee>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <HAL_GPIO_Init+0x1ee>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f60:	f002 0203 	and.w	r2, r2, #3
 8001f64:	0092      	lsls	r2, r2, #2
 8001f66:	4093      	lsls	r3, r2
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f6e:	492f      	ldr	r1, [pc, #188]	; (800202c <HAL_GPIO_Init+0x2bc>)
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	3302      	adds	r3, #2
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d006      	beq.n	8001f96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f88:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	492c      	ldr	r1, [pc, #176]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]
 8001f94:	e006      	b.n	8001fa4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f96:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	4928      	ldr	r1, [pc, #160]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d006      	beq.n	8001fbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fb0:	4b23      	ldr	r3, [pc, #140]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4922      	ldr	r1, [pc, #136]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60cb      	str	r3, [r1, #12]
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fbe:	4b20      	ldr	r3, [pc, #128]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	491e      	ldr	r1, [pc, #120]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	4918      	ldr	r1, [pc, #96]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	4914      	ldr	r1, [pc, #80]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d021      	beq.n	8002044 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	490e      	ldr	r1, [pc, #56]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
 800200c:	e021      	b.n	8002052 <HAL_GPIO_Init+0x2e2>
 800200e:	bf00      	nop
 8002010:	10320000 	.word	0x10320000
 8002014:	10310000 	.word	0x10310000
 8002018:	10220000 	.word	0x10220000
 800201c:	10210000 	.word	0x10210000
 8002020:	10120000 	.word	0x10120000
 8002024:	10110000 	.word	0x10110000
 8002028:	40021000 	.word	0x40021000
 800202c:	40010000 	.word	0x40010000
 8002030:	40010800 	.word	0x40010800
 8002034:	40010c00 	.word	0x40010c00
 8002038:	40011000 	.word	0x40011000
 800203c:	40011400 	.word	0x40011400
 8002040:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_GPIO_Init+0x304>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	43db      	mvns	r3, r3
 800204c:	4909      	ldr	r1, [pc, #36]	; (8002074 <HAL_GPIO_Init+0x304>)
 800204e:	4013      	ands	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	3301      	adds	r3, #1
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	fa22 f303 	lsr.w	r3, r2, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	f47f ae8e 	bne.w	8001d84 <HAL_GPIO_Init+0x14>
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	372c      	adds	r7, #44	; 0x2c
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	40010400 	.word	0x40010400

08002078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e12b      	b.n	80022e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7fe fcb4 	bl	8000a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2224      	movs	r2, #36	; 0x24
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0201 	bic.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020dc:	f001 f832 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 80020e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4a81      	ldr	r2, [pc, #516]	; (80022ec <HAL_I2C_Init+0x274>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d807      	bhi.n	80020fc <HAL_I2C_Init+0x84>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a80      	ldr	r2, [pc, #512]	; (80022f0 <HAL_I2C_Init+0x278>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	bf94      	ite	ls
 80020f4:	2301      	movls	r3, #1
 80020f6:	2300      	movhi	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	e006      	b.n	800210a <HAL_I2C_Init+0x92>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4a7d      	ldr	r2, [pc, #500]	; (80022f4 <HAL_I2C_Init+0x27c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	bf94      	ite	ls
 8002104:	2301      	movls	r3, #1
 8002106:	2300      	movhi	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0e7      	b.n	80022e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4a78      	ldr	r2, [pc, #480]	; (80022f8 <HAL_I2C_Init+0x280>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	0c9b      	lsrs	r3, r3, #18
 800211c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	430a      	orrs	r2, r1
 8002130:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	4a6a      	ldr	r2, [pc, #424]	; (80022ec <HAL_I2C_Init+0x274>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d802      	bhi.n	800214c <HAL_I2C_Init+0xd4>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	3301      	adds	r3, #1
 800214a:	e009      	b.n	8002160 <HAL_I2C_Init+0xe8>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	4a69      	ldr	r2, [pc, #420]	; (80022fc <HAL_I2C_Init+0x284>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	099b      	lsrs	r3, r3, #6
 800215e:	3301      	adds	r3, #1
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	430b      	orrs	r3, r1
 8002166:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002172:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	495c      	ldr	r1, [pc, #368]	; (80022ec <HAL_I2C_Init+0x274>)
 800217c:	428b      	cmp	r3, r1
 800217e:	d819      	bhi.n	80021b4 <HAL_I2C_Init+0x13c>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1e59      	subs	r1, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	fbb1 f3f3 	udiv	r3, r1, r3
 800218e:	1c59      	adds	r1, r3, #1
 8002190:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002194:	400b      	ands	r3, r1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_I2C_Init+0x138>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1e59      	subs	r1, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ae:	e051      	b.n	8002254 <HAL_I2C_Init+0x1dc>
 80021b0:	2304      	movs	r3, #4
 80021b2:	e04f      	b.n	8002254 <HAL_I2C_Init+0x1dc>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d111      	bne.n	80021e0 <HAL_I2C_Init+0x168>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1e58      	subs	r0, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6859      	ldr	r1, [r3, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	440b      	add	r3, r1
 80021ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	e012      	b.n	8002206 <HAL_I2C_Init+0x18e>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1e58      	subs	r0, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	0099      	lsls	r1, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f6:	3301      	adds	r3, #1
 80021f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_Init+0x196>
 800220a:	2301      	movs	r3, #1
 800220c:	e022      	b.n	8002254 <HAL_I2C_Init+0x1dc>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10e      	bne.n	8002234 <HAL_I2C_Init+0x1bc>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1e58      	subs	r0, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6859      	ldr	r1, [r3, #4]
 800221e:	460b      	mov	r3, r1
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	440b      	add	r3, r1
 8002224:	fbb0 f3f3 	udiv	r3, r0, r3
 8002228:	3301      	adds	r3, #1
 800222a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002232:	e00f      	b.n	8002254 <HAL_I2C_Init+0x1dc>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	1e58      	subs	r0, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	0099      	lsls	r1, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	fbb0 f3f3 	udiv	r3, r0, r3
 800224a:	3301      	adds	r3, #1
 800224c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	6809      	ldr	r1, [r1, #0]
 8002258:	4313      	orrs	r3, r2
 800225a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6911      	ldr	r1, [r2, #16]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68d2      	ldr	r2, [r2, #12]
 800228e:	4311      	orrs	r1, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	430b      	orrs	r3, r1
 8002296:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2220      	movs	r2, #32
 80022ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	000186a0 	.word	0x000186a0
 80022f0:	001e847f 	.word	0x001e847f
 80022f4:	003d08ff 	.word	0x003d08ff
 80022f8:	431bde83 	.word	0x431bde83
 80022fc:	10624dd3 	.word	0x10624dd3

08002300 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af02      	add	r7, sp, #8
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	461a      	mov	r2, r3
 800230c:	460b      	mov	r3, r1
 800230e:	817b      	strh	r3, [r7, #10]
 8002310:	4613      	mov	r3, r2
 8002312:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002314:	f7fe fd30 	bl	8000d78 <HAL_GetTick>
 8002318:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b20      	cmp	r3, #32
 8002324:	f040 80e0 	bne.w	80024e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2319      	movs	r3, #25
 800232e:	2201      	movs	r2, #1
 8002330:	4970      	ldr	r1, [pc, #448]	; (80024f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f964 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800233e:	2302      	movs	r3, #2
 8002340:	e0d3      	b.n	80024ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_I2C_Master_Transmit+0x50>
 800234c:	2302      	movs	r3, #2
 800234e:	e0cc      	b.n	80024ea <HAL_I2C_Master_Transmit+0x1ea>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d007      	beq.n	8002376 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0201 	orr.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002384:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2221      	movs	r2, #33	; 0x21
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2210      	movs	r2, #16
 8002392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	893a      	ldrh	r2, [r7, #8]
 80023a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4a50      	ldr	r2, [pc, #320]	; (80024f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023b8:	8979      	ldrh	r1, [r7, #10]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	6a3a      	ldr	r2, [r7, #32]
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f89c 	bl	80024fc <I2C_MasterRequestWrite>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e08d      	b.n	80024ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023e4:	e066      	b.n	80024b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	6a39      	ldr	r1, [r7, #32]
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fa22 	bl	8002834 <I2C_WaitOnTXEFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00d      	beq.n	8002412 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d107      	bne.n	800240e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e06b      	b.n	80024ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b04      	cmp	r3, #4
 800244e:	d11b      	bne.n	8002488 <HAL_I2C_Master_Transmit+0x188>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	d017      	beq.n	8002488 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	6a39      	ldr	r1, [r7, #32]
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fa19 	bl	80028c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00d      	beq.n	80024b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	2b04      	cmp	r3, #4
 800249e:	d107      	bne.n	80024b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e01a      	b.n	80024ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d194      	bne.n	80023e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e000      	b.n	80024ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024e8:	2302      	movs	r3, #2
  }
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	00100002 	.word	0x00100002
 80024f8:	ffff0000 	.word	0xffff0000

080024fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	460b      	mov	r3, r1
 800250a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b08      	cmp	r3, #8
 8002516:	d006      	beq.n	8002526 <I2C_MasterRequestWrite+0x2a>
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d003      	beq.n	8002526 <I2C_MasterRequestWrite+0x2a>
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002524:	d108      	bne.n	8002538 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	e00b      	b.n	8002550 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	2b12      	cmp	r3, #18
 800253e:	d107      	bne.n	8002550 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800254e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f84f 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00d      	beq.n	8002584 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002576:	d103      	bne.n	8002580 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e035      	b.n	80025f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800258c:	d108      	bne.n	80025a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800258e:	897b      	ldrh	r3, [r7, #10]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800259c:	611a      	str	r2, [r3, #16]
 800259e:	e01b      	b.n	80025d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025a0:	897b      	ldrh	r3, [r7, #10]
 80025a2:	11db      	asrs	r3, r3, #7
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f003 0306 	and.w	r3, r3, #6
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f063 030f 	orn	r3, r3, #15
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	490e      	ldr	r1, [pc, #56]	; (80025f8 <I2C_MasterRequestWrite+0xfc>)
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f898 	bl	80026f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e010      	b.n	80025f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025ce:	897b      	ldrh	r3, [r7, #10]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	4907      	ldr	r1, [pc, #28]	; (80025fc <I2C_MasterRequestWrite+0x100>)
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f888 	bl	80026f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	00010008 	.word	0x00010008
 80025fc:	00010002 	.word	0x00010002

08002600 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002610:	e048      	b.n	80026a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d044      	beq.n	80026a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261a:	f7fe fbad 	bl	8000d78 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d302      	bcc.n	8002630 <I2C_WaitOnFlagUntilTimeout+0x30>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d139      	bne.n	80026a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	0c1b      	lsrs	r3, r3, #16
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d10d      	bne.n	8002656 <I2C_WaitOnFlagUntilTimeout+0x56>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	43da      	mvns	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	4013      	ands	r3, r2
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	e00c      	b.n	8002670 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	43da      	mvns	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4013      	ands	r3, r2
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	429a      	cmp	r2, r3
 8002674:	d116      	bne.n	80026a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f043 0220 	orr.w	r2, r3, #32
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e023      	b.n	80026ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	0c1b      	lsrs	r3, r3, #16
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d10d      	bne.n	80026ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	43da      	mvns	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	4013      	ands	r3, r2
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	e00c      	b.n	80026e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	43da      	mvns	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4013      	ands	r3, r2
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d093      	beq.n	8002612 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002702:	e071      	b.n	80027e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002712:	d123      	bne.n	800275c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002722:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800272c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f043 0204 	orr.w	r2, r3, #4
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e067      	b.n	800282c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002762:	d041      	beq.n	80027e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002764:	f7fe fb08 	bl	8000d78 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	d302      	bcc.n	800277a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d136      	bne.n	80027e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d10c      	bne.n	800279e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	43da      	mvns	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4013      	ands	r3, r2
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	bf14      	ite	ne
 8002796:	2301      	movne	r3, #1
 8002798:	2300      	moveq	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	e00b      	b.n	80027b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	43da      	mvns	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	4013      	ands	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d016      	beq.n	80027e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f043 0220 	orr.w	r2, r3, #32
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e021      	b.n	800282c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	0c1b      	lsrs	r3, r3, #16
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d10c      	bne.n	800280c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	43da      	mvns	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	4013      	ands	r3, r2
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e00b      	b.n	8002824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4013      	ands	r3, r2
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	bf14      	ite	ne
 800281e:	2301      	movne	r3, #1
 8002820:	2300      	moveq	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	f47f af6d 	bne.w	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002840:	e034      	b.n	80028ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f886 	bl	8002954 <I2C_IsAcknowledgeFailed>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e034      	b.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d028      	beq.n	80028ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285a:	f7fe fa8d 	bl	8000d78 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	429a      	cmp	r2, r3
 8002868:	d302      	bcc.n	8002870 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d11d      	bne.n	80028ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	2b80      	cmp	r3, #128	; 0x80
 800287c:	d016      	beq.n	80028ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f043 0220 	orr.w	r2, r3, #32
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e007      	b.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b80      	cmp	r3, #128	; 0x80
 80028b8:	d1c3      	bne.n	8002842 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028d0:	e034      	b.n	800293c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f83e 	bl	8002954 <I2C_IsAcknowledgeFailed>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e034      	b.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d028      	beq.n	800293c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ea:	f7fe fa45 	bl	8000d78 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d302      	bcc.n	8002900 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d11d      	bne.n	800293c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b04      	cmp	r3, #4
 800290c:	d016      	beq.n	800293c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e007      	b.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b04      	cmp	r3, #4
 8002948:	d1c3      	bne.n	80028d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296a:	d11b      	bne.n	80029a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002974:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f043 0204 	orr.w	r2, r3, #4
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e272      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8087 	beq.w	8002ade <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d0:	4b92      	ldr	r3, [pc, #584]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d00c      	beq.n	80029f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029dc:	4b8f      	ldr	r3, [pc, #572]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d112      	bne.n	8002a0e <HAL_RCC_OscConfig+0x5e>
 80029e8:	4b8c      	ldr	r3, [pc, #560]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f4:	d10b      	bne.n	8002a0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f6:	4b89      	ldr	r3, [pc, #548]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d06c      	beq.n	8002adc <HAL_RCC_OscConfig+0x12c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d168      	bne.n	8002adc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e24c      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a16:	d106      	bne.n	8002a26 <HAL_RCC_OscConfig+0x76>
 8002a18:	4b80      	ldr	r3, [pc, #512]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a7f      	ldr	r2, [pc, #508]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	e02e      	b.n	8002a84 <HAL_RCC_OscConfig+0xd4>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x98>
 8002a2e:	4b7b      	ldr	r3, [pc, #492]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a7a      	ldr	r2, [pc, #488]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b78      	ldr	r3, [pc, #480]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a77      	ldr	r2, [pc, #476]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e01d      	b.n	8002a84 <HAL_RCC_OscConfig+0xd4>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0xbc>
 8002a52:	4b72      	ldr	r3, [pc, #456]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a71      	ldr	r2, [pc, #452]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b6f      	ldr	r3, [pc, #444]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a6e      	ldr	r2, [pc, #440]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0xd4>
 8002a6c:	4b6b      	ldr	r3, [pc, #428]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a6a      	ldr	r2, [pc, #424]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b68      	ldr	r3, [pc, #416]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a67      	ldr	r2, [pc, #412]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d013      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe f974 	bl	8000d78 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe f970 	bl	8000d78 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e200      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	4b5d      	ldr	r3, [pc, #372]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0xe4>
 8002ab2:	e014      	b.n	8002ade <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe f960 	bl	8000d78 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7fe f95c 	bl	8000d78 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1ec      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x10c>
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d063      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aea:	4b4c      	ldr	r3, [pc, #304]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002af6:	4b49      	ldr	r3, [pc, #292]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d11c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x18c>
 8002b02:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d116      	bne.n	8002b3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_RCC_OscConfig+0x176>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d001      	beq.n	8002b26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e1c0      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4939      	ldr	r1, [pc, #228]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	e03a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b44:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7fe f915 	bl	8000d78 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b52:	f7fe f911 	bl	8000d78 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e1a1      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b64:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b70:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4927      	ldr	r1, [pc, #156]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]
 8002b84:	e015      	b.n	8002bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b86:	4b26      	ldr	r3, [pc, #152]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe f8f4 	bl	8000d78 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b94:	f7fe f8f0 	bl	8000d78 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e180      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d03a      	beq.n	8002c34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d019      	beq.n	8002bfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc6:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bcc:	f7fe f8d4 	bl	8000d78 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd4:	f7fe f8d0 	bl	8000d78 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e160      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f000 face 	bl	8003194 <RCC_Delay>
 8002bf8:	e01c      	b.n	8002c34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c00:	f7fe f8ba 	bl	8000d78 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c06:	e00f      	b.n	8002c28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c08:	f7fe f8b6 	bl	8000d78 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d908      	bls.n	8002c28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e146      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	42420000 	.word	0x42420000
 8002c24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c28:	4b92      	ldr	r3, [pc, #584]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e9      	bne.n	8002c08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80a6 	beq.w	8002d8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c42:	2300      	movs	r3, #0
 8002c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c46:	4b8b      	ldr	r3, [pc, #556]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10d      	bne.n	8002c6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c52:	4b88      	ldr	r3, [pc, #544]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4a87      	ldr	r2, [pc, #540]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	61d3      	str	r3, [r2, #28]
 8002c5e:	4b85      	ldr	r3, [pc, #532]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6e:	4b82      	ldr	r3, [pc, #520]	; (8002e78 <HAL_RCC_OscConfig+0x4c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d118      	bne.n	8002cac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c7a:	4b7f      	ldr	r3, [pc, #508]	; (8002e78 <HAL_RCC_OscConfig+0x4c8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a7e      	ldr	r2, [pc, #504]	; (8002e78 <HAL_RCC_OscConfig+0x4c8>)
 8002c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c86:	f7fe f877 	bl	8000d78 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8e:	f7fe f873 	bl	8000d78 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b64      	cmp	r3, #100	; 0x64
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e103      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca0:	4b75      	ldr	r3, [pc, #468]	; (8002e78 <HAL_RCC_OscConfig+0x4c8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x312>
 8002cb4:	4b6f      	ldr	r3, [pc, #444]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4a6e      	ldr	r2, [pc, #440]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	6213      	str	r3, [r2, #32]
 8002cc0:	e02d      	b.n	8002d1e <HAL_RCC_OscConfig+0x36e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x334>
 8002cca:	4b6a      	ldr	r3, [pc, #424]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4a69      	ldr	r2, [pc, #420]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6213      	str	r3, [r2, #32]
 8002cd6:	4b67      	ldr	r3, [pc, #412]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	4a66      	ldr	r2, [pc, #408]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	6213      	str	r3, [r2, #32]
 8002ce2:	e01c      	b.n	8002d1e <HAL_RCC_OscConfig+0x36e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d10c      	bne.n	8002d06 <HAL_RCC_OscConfig+0x356>
 8002cec:	4b61      	ldr	r3, [pc, #388]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	4a60      	ldr	r2, [pc, #384]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	f043 0304 	orr.w	r3, r3, #4
 8002cf6:	6213      	str	r3, [r2, #32]
 8002cf8:	4b5e      	ldr	r3, [pc, #376]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4a5d      	ldr	r2, [pc, #372]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6213      	str	r3, [r2, #32]
 8002d04:	e00b      	b.n	8002d1e <HAL_RCC_OscConfig+0x36e>
 8002d06:	4b5b      	ldr	r3, [pc, #364]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4a5a      	ldr	r2, [pc, #360]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	6213      	str	r3, [r2, #32]
 8002d12:	4b58      	ldr	r3, [pc, #352]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4a57      	ldr	r2, [pc, #348]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	f023 0304 	bic.w	r3, r3, #4
 8002d1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d015      	beq.n	8002d52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d26:	f7fe f827 	bl	8000d78 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2e:	f7fe f823 	bl	8000d78 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e0b1      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	4b4b      	ldr	r3, [pc, #300]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ee      	beq.n	8002d2e <HAL_RCC_OscConfig+0x37e>
 8002d50:	e014      	b.n	8002d7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d52:	f7fe f811 	bl	8000d78 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fe f80d 	bl	8000d78 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e09b      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d70:	4b40      	ldr	r3, [pc, #256]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ee      	bne.n	8002d5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d105      	bne.n	8002d8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d82:	4b3c      	ldr	r3, [pc, #240]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4a3b      	ldr	r2, [pc, #236]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 8087 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d98:	4b36      	ldr	r3, [pc, #216]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d061      	beq.n	8002e68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d146      	bne.n	8002e3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dac:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <HAL_RCC_OscConfig+0x4cc>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fd ffe1 	bl	8000d78 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dba:	f7fd ffdd 	bl	8000d78 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e06d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dcc:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f0      	bne.n	8002dba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de0:	d108      	bne.n	8002df4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	4921      	ldr	r1, [pc, #132]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df4:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a19      	ldr	r1, [r3, #32]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	430b      	orrs	r3, r1
 8002e06:	491b      	ldr	r1, [pc, #108]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_RCC_OscConfig+0x4cc>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fd ffb1 	bl	8000d78 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fd ffad 	bl	8000d78 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e03d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x46a>
 8002e38:	e035      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_RCC_OscConfig+0x4cc>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fd ff9a 	bl	8000d78 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fd ff96 	bl	8000d78 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e026      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x498>
 8002e66:	e01e      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e019      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_RCC_OscConfig+0x500>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d106      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000

08002eb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0d0      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b6a      	ldr	r3, [pc, #424]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d910      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b67      	ldr	r3, [pc, #412]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 0207 	bic.w	r2, r3, #7
 8002ede:	4965      	ldr	r1, [pc, #404]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b63      	ldr	r3, [pc, #396]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0b8      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f10:	4b59      	ldr	r3, [pc, #356]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4a58      	ldr	r2, [pc, #352]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f28:	4b53      	ldr	r3, [pc, #332]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a52      	ldr	r2, [pc, #328]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f34:	4b50      	ldr	r3, [pc, #320]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	494d      	ldr	r1, [pc, #308]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d040      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	4b47      	ldr	r3, [pc, #284]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d115      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e07f      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b41      	ldr	r3, [pc, #260]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e073      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f82:	4b3d      	ldr	r3, [pc, #244]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e06b      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f92:	4b39      	ldr	r3, [pc, #228]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4936      	ldr	r1, [pc, #216]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa4:	f7fd fee8 	bl	8000d78 <HAL_GetTick>
 8002fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fac:	f7fd fee4 	bl	8000d78 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e053      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 020c 	and.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d1eb      	bne.n	8002fac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b27      	ldr	r3, [pc, #156]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d210      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b24      	ldr	r3, [pc, #144]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 0207 	bic.w	r2, r3, #7
 8002fea:	4922      	ldr	r1, [pc, #136]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e032      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4916      	ldr	r1, [pc, #88]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	490e      	ldr	r1, [pc, #56]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003042:	f000 f821 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003046:	4602      	mov	r2, r0
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	490a      	ldr	r1, [pc, #40]	; (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8003054:	5ccb      	ldrb	r3, [r1, r3]
 8003056:	fa22 f303 	lsr.w	r3, r2, r3
 800305a:	4a09      	ldr	r2, [pc, #36]	; (8003080 <HAL_RCC_ClockConfig+0x1cc>)
 800305c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800305e:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCC_ClockConfig+0x1d0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fe46 	bl	8000cf4 <HAL_InitTick>

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40022000 	.word	0x40022000
 8003078:	40021000 	.word	0x40021000
 800307c:	08004858 	.word	0x08004858
 8003080:	20000000 	.word	0x20000000
 8003084:	20000004 	.word	0x20000004

08003088 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030a2:	4b1e      	ldr	r3, [pc, #120]	; (800311c <HAL_RCC_GetSysClockFreq+0x94>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d002      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x30>
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d003      	beq.n	80030be <HAL_RCC_GetSysClockFreq+0x36>
 80030b6:	e027      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ba:	613b      	str	r3, [r7, #16]
      break;
 80030bc:	e027      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	0c9b      	lsrs	r3, r3, #18
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	4a17      	ldr	r2, [pc, #92]	; (8003124 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030c8:	5cd3      	ldrb	r3, [r2, r3]
 80030ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d010      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030d6:	4b11      	ldr	r3, [pc, #68]	; (800311c <HAL_RCC_GetSysClockFreq+0x94>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	0c5b      	lsrs	r3, r3, #17
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	4a11      	ldr	r2, [pc, #68]	; (8003128 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030e2:	5cd3      	ldrb	r3, [r2, r3]
 80030e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ea:	fb03 f202 	mul.w	r2, r3, r2
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e004      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a0c      	ldr	r2, [pc, #48]	; (800312c <HAL_RCC_GetSysClockFreq+0xa4>)
 80030fc:	fb02 f303 	mul.w	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	613b      	str	r3, [r7, #16]
      break;
 8003106:	e002      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_RCC_GetSysClockFreq+0x98>)
 800310a:	613b      	str	r3, [r7, #16]
      break;
 800310c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310e:	693b      	ldr	r3, [r7, #16]
}
 8003110:	4618      	mov	r0, r3
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
 8003120:	007a1200 	.word	0x007a1200
 8003124:	08004870 	.word	0x08004870
 8003128:	08004880 	.word	0x08004880
 800312c:	003d0900 	.word	0x003d0900

08003130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003134:	4b02      	ldr	r3, [pc, #8]	; (8003140 <HAL_RCC_GetHCLKFreq+0x10>)
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	20000000 	.word	0x20000000

08003144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003148:	f7ff fff2 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 800314c:	4602      	mov	r2, r0
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	0a1b      	lsrs	r3, r3, #8
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	4903      	ldr	r1, [pc, #12]	; (8003168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800315a:	5ccb      	ldrb	r3, [r1, r3]
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40021000 	.word	0x40021000
 8003168:	08004868 	.word	0x08004868

0800316c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003170:	f7ff ffde 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003174:	4602      	mov	r2, r0
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	0adb      	lsrs	r3, r3, #11
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	4903      	ldr	r1, [pc, #12]	; (8003190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003182:	5ccb      	ldrb	r3, [r1, r3]
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003188:	4618      	mov	r0, r3
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40021000 	.word	0x40021000
 8003190:	08004868 	.word	0x08004868

08003194 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800319c:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <RCC_Delay+0x34>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <RCC_Delay+0x38>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	0a5b      	lsrs	r3, r3, #9
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031b0:	bf00      	nop
  }
  while (Delay --);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1e5a      	subs	r2, r3, #1
 80031b6:	60fa      	str	r2, [r7, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f9      	bne.n	80031b0 <RCC_Delay+0x1c>
}
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	20000000 	.word	0x20000000
 80031cc:	10624dd3 	.word	0x10624dd3

080031d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d07d      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80031ec:	2300      	movs	r3, #0
 80031ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f0:	4b4f      	ldr	r3, [pc, #316]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10d      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fc:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	4a4b      	ldr	r2, [pc, #300]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003206:	61d3      	str	r3, [r2, #28]
 8003208:	4b49      	ldr	r3, [pc, #292]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003214:	2301      	movs	r3, #1
 8003216:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003218:	4b46      	ldr	r3, [pc, #280]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d118      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003224:	4b43      	ldr	r3, [pc, #268]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a42      	ldr	r2, [pc, #264]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800322a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003230:	f7fd fda2 	bl	8000d78 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003236:	e008      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003238:	f7fd fd9e 	bl	8000d78 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e06d      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324a:	4b3a      	ldr	r3, [pc, #232]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003256:	4b36      	ldr	r3, [pc, #216]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d02e      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	429a      	cmp	r2, r3
 8003272:	d027      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003274:	4b2e      	ldr	r3, [pc, #184]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800327e:	4b2e      	ldr	r3, [pc, #184]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003280:	2201      	movs	r2, #1
 8003282:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003284:	4b2c      	ldr	r3, [pc, #176]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800328a:	4a29      	ldr	r2, [pc, #164]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d014      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329a:	f7fd fd6d 	bl	8000d78 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a0:	e00a      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fd fd69 	bl	8000d78 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e036      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b8:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0ee      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	4917      	ldr	r1, [pc, #92]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032d6:	7dfb      	ldrb	r3, [r7, #23]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d105      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	4a13      	ldr	r2, [pc, #76]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032f4:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	490b      	ldr	r1, [pc, #44]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003302:	4313      	orrs	r3, r2
 8003304:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003312:	4b07      	ldr	r3, [pc, #28]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	4904      	ldr	r1, [pc, #16]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
 8003334:	40007000 	.word	0x40007000
 8003338:	42420440 	.word	0x42420440

0800333c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	2300      	movs	r3, #0
 800334e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b10      	cmp	r3, #16
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b10      	cmp	r3, #16
 8003362:	f200 808a 	bhi.w	800347a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d045      	beq.n	80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d075      	beq.n	800345e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003372:	e082      	b.n	800347a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003374:	4b46      	ldr	r3, [pc, #280]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800337a:	4b45      	ldr	r3, [pc, #276]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d07b      	beq.n	800347e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	0c9b      	lsrs	r3, r3, #18
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	4a41      	ldr	r2, [pc, #260]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003390:	5cd3      	ldrb	r3, [r2, r3]
 8003392:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d015      	beq.n	80033ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800339e:	4b3c      	ldr	r3, [pc, #240]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	0c5b      	lsrs	r3, r3, #17
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	4a3b      	ldr	r2, [pc, #236]	; (8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80033aa:	5cd3      	ldrb	r3, [r2, r3]
 80033ac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80033b8:	4a38      	ldr	r2, [pc, #224]	; (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	61fb      	str	r3, [r7, #28]
 80033c8:	e004      	b.n	80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4a34      	ldr	r2, [pc, #208]	; (80034a0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80033ce:	fb02 f303 	mul.w	r3, r2, r3
 80033d2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80033d4:	4b2e      	ldr	r3, [pc, #184]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033e0:	d102      	bne.n	80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	61bb      	str	r3, [r7, #24]
      break;
 80033e6:	e04a      	b.n	800347e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4a2d      	ldr	r2, [pc, #180]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	61bb      	str	r3, [r7, #24]
      break;
 80033f6:	e042      	b.n	800347e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80033f8:	4b25      	ldr	r3, [pc, #148]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003408:	d108      	bne.n	800341c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	e01f      	b.n	800345c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003426:	d109      	bne.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003428:	4b19      	ldr	r3, [pc, #100]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003434:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	e00f      	b.n	800345c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003446:	d11c      	bne.n	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003448:	4b11      	ldr	r3, [pc, #68]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d016      	beq.n	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003454:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003458:	61bb      	str	r3, [r7, #24]
      break;
 800345a:	e012      	b.n	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800345c:	e011      	b.n	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800345e:	f7ff fe85 	bl	800316c <HAL_RCC_GetPCLK2Freq>
 8003462:	4602      	mov	r2, r0
 8003464:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	0b9b      	lsrs	r3, r3, #14
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	3301      	adds	r3, #1
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	fbb2 f3f3 	udiv	r3, r2, r3
 8003476:	61bb      	str	r3, [r7, #24]
      break;
 8003478:	e004      	b.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800347a:	bf00      	nop
 800347c:	e002      	b.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800347e:	bf00      	nop
 8003480:	e000      	b.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003482:	bf00      	nop
    }
  }
  return (frequency);
 8003484:	69bb      	ldr	r3, [r7, #24]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000
 8003494:	08004884 	.word	0x08004884
 8003498:	08004894 	.word	0x08004894
 800349c:	007a1200 	.word	0x007a1200
 80034a0:	003d0900 	.word	0x003d0900
 80034a4:	aaaaaaab 	.word	0xaaaaaaab

080034a8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e04a      	b.n	8003550 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fada 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2224      	movs	r2, #36	; 0x24
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f925 	bl	800373c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003500:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695a      	ldr	r2, [r3, #20]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003510:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0208 	orr.w	r2, r2, #8
 8003520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08a      	sub	sp, #40	; 0x28
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b20      	cmp	r3, #32
 8003576:	d16d      	bne.n	8003654 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_UART_Transmit+0x2c>
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e066      	b.n	8003656 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2221      	movs	r2, #33	; 0x21
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003596:	f7fd fbef 	bl	8000d78 <HAL_GetTick>
 800359a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	88fa      	ldrh	r2, [r7, #6]
 80035a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b0:	d108      	bne.n	80035c4 <HAL_UART_Transmit+0x6c>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d104      	bne.n	80035c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	e003      	b.n	80035cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035cc:	e02a      	b.n	8003624 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	2180      	movs	r1, #128	; 0x80
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f840 	bl	800365e <UART_WaitOnFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e036      	b.n	8003656 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	3302      	adds	r3, #2
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	e007      	b.n	8003616 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	3301      	adds	r3, #1
 8003614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1cf      	bne.n	80035ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2200      	movs	r2, #0
 8003636:	2140      	movs	r1, #64	; 0x40
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f810 	bl	800365e <UART_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e006      	b.n	8003656 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e000      	b.n	8003656 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003654:	2302      	movs	r3, #2
  }
}
 8003656:	4618      	mov	r0, r3
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b090      	sub	sp, #64	; 0x40
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	4613      	mov	r3, r2
 800366c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366e:	e050      	b.n	8003712 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d04c      	beq.n	8003712 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367a:	2b00      	cmp	r3, #0
 800367c:	d007      	beq.n	800368e <UART_WaitOnFlagUntilTimeout+0x30>
 800367e:	f7fd fb7b 	bl	8000d78 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800368a:	429a      	cmp	r2, r3
 800368c:	d241      	bcs.n	8003712 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	330c      	adds	r3, #12
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ae:	637a      	str	r2, [r7, #52]	; 0x34
 80036b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e5      	bne.n	800368e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3314      	adds	r3, #20
 80036c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	e853 3f00 	ldrex	r3, [r3]
 80036d0:	613b      	str	r3, [r7, #16]
   return(result);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3314      	adds	r3, #20
 80036e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036e2:	623a      	str	r2, [r7, #32]
 80036e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e6:	69f9      	ldr	r1, [r7, #28]
 80036e8:	6a3a      	ldr	r2, [r7, #32]
 80036ea:	e841 2300 	strex	r3, r2, [r1]
 80036ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1e5      	bne.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e00f      	b.n	8003732 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4013      	ands	r3, r2
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	429a      	cmp	r2, r3
 8003720:	bf0c      	ite	eq
 8003722:	2301      	moveq	r3, #1
 8003724:	2300      	movne	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	429a      	cmp	r2, r3
 800372e:	d09f      	beq.n	8003670 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3740      	adds	r7, #64	; 0x40
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003776:	f023 030c 	bic.w	r3, r3, #12
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6812      	ldr	r2, [r2, #0]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	430b      	orrs	r3, r1
 8003782:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a2c      	ldr	r2, [pc, #176]	; (8003850 <UART_SetConfig+0x114>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d103      	bne.n	80037ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037a4:	f7ff fce2 	bl	800316c <HAL_RCC_GetPCLK2Freq>
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	e002      	b.n	80037b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037ac:	f7ff fcca 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 80037b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	009a      	lsls	r2, r3, #2
 80037bc:	441a      	add	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	4a22      	ldr	r2, [pc, #136]	; (8003854 <UART_SetConfig+0x118>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	0119      	lsls	r1, r3, #4
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	009a      	lsls	r2, r3, #2
 80037dc:	441a      	add	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037e8:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <UART_SetConfig+0x118>)
 80037ea:	fba3 0302 	umull	r0, r3, r3, r2
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2064      	movs	r0, #100	; 0x64
 80037f2:	fb00 f303 	mul.w	r3, r0, r3
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	3332      	adds	r3, #50	; 0x32
 80037fc:	4a15      	ldr	r2, [pc, #84]	; (8003854 <UART_SetConfig+0x118>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003808:	4419      	add	r1, r3
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	009a      	lsls	r2, r3, #2
 8003814:	441a      	add	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <UART_SetConfig+0x118>)
 8003822:	fba3 0302 	umull	r0, r3, r3, r2
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2064      	movs	r0, #100	; 0x64
 800382a:	fb00 f303 	mul.w	r3, r0, r3
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	3332      	adds	r3, #50	; 0x32
 8003834:	4a07      	ldr	r2, [pc, #28]	; (8003854 <UART_SetConfig+0x118>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	f003 020f 	and.w	r2, r3, #15
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	440a      	add	r2, r1
 8003846:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003848:	bf00      	nop
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40013800 	.word	0x40013800
 8003854:	51eb851f 	.word	0x51eb851f

08003858 <__errno>:
 8003858:	4b01      	ldr	r3, [pc, #4]	; (8003860 <__errno+0x8>)
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	2000000c 	.word	0x2000000c

08003864 <__libc_init_array>:
 8003864:	b570      	push	{r4, r5, r6, lr}
 8003866:	2600      	movs	r6, #0
 8003868:	4d0c      	ldr	r5, [pc, #48]	; (800389c <__libc_init_array+0x38>)
 800386a:	4c0d      	ldr	r4, [pc, #52]	; (80038a0 <__libc_init_array+0x3c>)
 800386c:	1b64      	subs	r4, r4, r5
 800386e:	10a4      	asrs	r4, r4, #2
 8003870:	42a6      	cmp	r6, r4
 8003872:	d109      	bne.n	8003888 <__libc_init_array+0x24>
 8003874:	f000 ffb6 	bl	80047e4 <_init>
 8003878:	2600      	movs	r6, #0
 800387a:	4d0a      	ldr	r5, [pc, #40]	; (80038a4 <__libc_init_array+0x40>)
 800387c:	4c0a      	ldr	r4, [pc, #40]	; (80038a8 <__libc_init_array+0x44>)
 800387e:	1b64      	subs	r4, r4, r5
 8003880:	10a4      	asrs	r4, r4, #2
 8003882:	42a6      	cmp	r6, r4
 8003884:	d105      	bne.n	8003892 <__libc_init_array+0x2e>
 8003886:	bd70      	pop	{r4, r5, r6, pc}
 8003888:	f855 3b04 	ldr.w	r3, [r5], #4
 800388c:	4798      	blx	r3
 800388e:	3601      	adds	r6, #1
 8003890:	e7ee      	b.n	8003870 <__libc_init_array+0xc>
 8003892:	f855 3b04 	ldr.w	r3, [r5], #4
 8003896:	4798      	blx	r3
 8003898:	3601      	adds	r6, #1
 800389a:	e7f2      	b.n	8003882 <__libc_init_array+0x1e>
 800389c:	08004930 	.word	0x08004930
 80038a0:	08004930 	.word	0x08004930
 80038a4:	08004930 	.word	0x08004930
 80038a8:	08004934 	.word	0x08004934

080038ac <memset>:
 80038ac:	4603      	mov	r3, r0
 80038ae:	4402      	add	r2, r0
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d100      	bne.n	80038b6 <memset+0xa>
 80038b4:	4770      	bx	lr
 80038b6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ba:	e7f9      	b.n	80038b0 <memset+0x4>

080038bc <iprintf>:
 80038bc:	b40f      	push	{r0, r1, r2, r3}
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <iprintf+0x2c>)
 80038c0:	b513      	push	{r0, r1, r4, lr}
 80038c2:	681c      	ldr	r4, [r3, #0]
 80038c4:	b124      	cbz	r4, 80038d0 <iprintf+0x14>
 80038c6:	69a3      	ldr	r3, [r4, #24]
 80038c8:	b913      	cbnz	r3, 80038d0 <iprintf+0x14>
 80038ca:	4620      	mov	r0, r4
 80038cc:	f000 f866 	bl	800399c <__sinit>
 80038d0:	ab05      	add	r3, sp, #20
 80038d2:	4620      	mov	r0, r4
 80038d4:	9a04      	ldr	r2, [sp, #16]
 80038d6:	68a1      	ldr	r1, [r4, #8]
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	f000 f9bb 	bl	8003c54 <_vfiprintf_r>
 80038de:	b002      	add	sp, #8
 80038e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e4:	b004      	add	sp, #16
 80038e6:	4770      	bx	lr
 80038e8:	2000000c 	.word	0x2000000c

080038ec <std>:
 80038ec:	2300      	movs	r3, #0
 80038ee:	b510      	push	{r4, lr}
 80038f0:	4604      	mov	r4, r0
 80038f2:	e9c0 3300 	strd	r3, r3, [r0]
 80038f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038fa:	6083      	str	r3, [r0, #8]
 80038fc:	8181      	strh	r1, [r0, #12]
 80038fe:	6643      	str	r3, [r0, #100]	; 0x64
 8003900:	81c2      	strh	r2, [r0, #14]
 8003902:	6183      	str	r3, [r0, #24]
 8003904:	4619      	mov	r1, r3
 8003906:	2208      	movs	r2, #8
 8003908:	305c      	adds	r0, #92	; 0x5c
 800390a:	f7ff ffcf 	bl	80038ac <memset>
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <std+0x38>)
 8003910:	6224      	str	r4, [r4, #32]
 8003912:	6263      	str	r3, [r4, #36]	; 0x24
 8003914:	4b04      	ldr	r3, [pc, #16]	; (8003928 <std+0x3c>)
 8003916:	62a3      	str	r3, [r4, #40]	; 0x28
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <std+0x40>)
 800391a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <std+0x44>)
 800391e:	6323      	str	r3, [r4, #48]	; 0x30
 8003920:	bd10      	pop	{r4, pc}
 8003922:	bf00      	nop
 8003924:	08004201 	.word	0x08004201
 8003928:	08004223 	.word	0x08004223
 800392c:	0800425b 	.word	0x0800425b
 8003930:	0800427f 	.word	0x0800427f

08003934 <_cleanup_r>:
 8003934:	4901      	ldr	r1, [pc, #4]	; (800393c <_cleanup_r+0x8>)
 8003936:	f000 b8af 	b.w	8003a98 <_fwalk_reent>
 800393a:	bf00      	nop
 800393c:	08004551 	.word	0x08004551

08003940 <__sfmoreglue>:
 8003940:	2268      	movs	r2, #104	; 0x68
 8003942:	b570      	push	{r4, r5, r6, lr}
 8003944:	1e4d      	subs	r5, r1, #1
 8003946:	4355      	muls	r5, r2
 8003948:	460e      	mov	r6, r1
 800394a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800394e:	f000 f8e5 	bl	8003b1c <_malloc_r>
 8003952:	4604      	mov	r4, r0
 8003954:	b140      	cbz	r0, 8003968 <__sfmoreglue+0x28>
 8003956:	2100      	movs	r1, #0
 8003958:	e9c0 1600 	strd	r1, r6, [r0]
 800395c:	300c      	adds	r0, #12
 800395e:	60a0      	str	r0, [r4, #8]
 8003960:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003964:	f7ff ffa2 	bl	80038ac <memset>
 8003968:	4620      	mov	r0, r4
 800396a:	bd70      	pop	{r4, r5, r6, pc}

0800396c <__sfp_lock_acquire>:
 800396c:	4801      	ldr	r0, [pc, #4]	; (8003974 <__sfp_lock_acquire+0x8>)
 800396e:	f000 b8b3 	b.w	8003ad8 <__retarget_lock_acquire_recursive>
 8003972:	bf00      	nop
 8003974:	200001a5 	.word	0x200001a5

08003978 <__sfp_lock_release>:
 8003978:	4801      	ldr	r0, [pc, #4]	; (8003980 <__sfp_lock_release+0x8>)
 800397a:	f000 b8ae 	b.w	8003ada <__retarget_lock_release_recursive>
 800397e:	bf00      	nop
 8003980:	200001a5 	.word	0x200001a5

08003984 <__sinit_lock_acquire>:
 8003984:	4801      	ldr	r0, [pc, #4]	; (800398c <__sinit_lock_acquire+0x8>)
 8003986:	f000 b8a7 	b.w	8003ad8 <__retarget_lock_acquire_recursive>
 800398a:	bf00      	nop
 800398c:	200001a6 	.word	0x200001a6

08003990 <__sinit_lock_release>:
 8003990:	4801      	ldr	r0, [pc, #4]	; (8003998 <__sinit_lock_release+0x8>)
 8003992:	f000 b8a2 	b.w	8003ada <__retarget_lock_release_recursive>
 8003996:	bf00      	nop
 8003998:	200001a6 	.word	0x200001a6

0800399c <__sinit>:
 800399c:	b510      	push	{r4, lr}
 800399e:	4604      	mov	r4, r0
 80039a0:	f7ff fff0 	bl	8003984 <__sinit_lock_acquire>
 80039a4:	69a3      	ldr	r3, [r4, #24]
 80039a6:	b11b      	cbz	r3, 80039b0 <__sinit+0x14>
 80039a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039ac:	f7ff bff0 	b.w	8003990 <__sinit_lock_release>
 80039b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039b4:	6523      	str	r3, [r4, #80]	; 0x50
 80039b6:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <__sinit+0x68>)
 80039b8:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <__sinit+0x6c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80039be:	42a3      	cmp	r3, r4
 80039c0:	bf08      	it	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	4620      	mov	r0, r4
 80039c6:	bf08      	it	eq
 80039c8:	61a3      	streq	r3, [r4, #24]
 80039ca:	f000 f81f 	bl	8003a0c <__sfp>
 80039ce:	6060      	str	r0, [r4, #4]
 80039d0:	4620      	mov	r0, r4
 80039d2:	f000 f81b 	bl	8003a0c <__sfp>
 80039d6:	60a0      	str	r0, [r4, #8]
 80039d8:	4620      	mov	r0, r4
 80039da:	f000 f817 	bl	8003a0c <__sfp>
 80039de:	2200      	movs	r2, #0
 80039e0:	2104      	movs	r1, #4
 80039e2:	60e0      	str	r0, [r4, #12]
 80039e4:	6860      	ldr	r0, [r4, #4]
 80039e6:	f7ff ff81 	bl	80038ec <std>
 80039ea:	2201      	movs	r2, #1
 80039ec:	2109      	movs	r1, #9
 80039ee:	68a0      	ldr	r0, [r4, #8]
 80039f0:	f7ff ff7c 	bl	80038ec <std>
 80039f4:	2202      	movs	r2, #2
 80039f6:	2112      	movs	r1, #18
 80039f8:	68e0      	ldr	r0, [r4, #12]
 80039fa:	f7ff ff77 	bl	80038ec <std>
 80039fe:	2301      	movs	r3, #1
 8003a00:	61a3      	str	r3, [r4, #24]
 8003a02:	e7d1      	b.n	80039a8 <__sinit+0xc>
 8003a04:	08004898 	.word	0x08004898
 8003a08:	08003935 	.word	0x08003935

08003a0c <__sfp>:
 8003a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0e:	4607      	mov	r7, r0
 8003a10:	f7ff ffac 	bl	800396c <__sfp_lock_acquire>
 8003a14:	4b1e      	ldr	r3, [pc, #120]	; (8003a90 <__sfp+0x84>)
 8003a16:	681e      	ldr	r6, [r3, #0]
 8003a18:	69b3      	ldr	r3, [r6, #24]
 8003a1a:	b913      	cbnz	r3, 8003a22 <__sfp+0x16>
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f7ff ffbd 	bl	800399c <__sinit>
 8003a22:	3648      	adds	r6, #72	; 0x48
 8003a24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	d503      	bpl.n	8003a34 <__sfp+0x28>
 8003a2c:	6833      	ldr	r3, [r6, #0]
 8003a2e:	b30b      	cbz	r3, 8003a74 <__sfp+0x68>
 8003a30:	6836      	ldr	r6, [r6, #0]
 8003a32:	e7f7      	b.n	8003a24 <__sfp+0x18>
 8003a34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a38:	b9d5      	cbnz	r5, 8003a70 <__sfp+0x64>
 8003a3a:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <__sfp+0x88>)
 8003a3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a40:	60e3      	str	r3, [r4, #12]
 8003a42:	6665      	str	r5, [r4, #100]	; 0x64
 8003a44:	f000 f847 	bl	8003ad6 <__retarget_lock_init_recursive>
 8003a48:	f7ff ff96 	bl	8003978 <__sfp_lock_release>
 8003a4c:	2208      	movs	r2, #8
 8003a4e:	4629      	mov	r1, r5
 8003a50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a58:	6025      	str	r5, [r4, #0]
 8003a5a:	61a5      	str	r5, [r4, #24]
 8003a5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a60:	f7ff ff24 	bl	80038ac <memset>
 8003a64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a70:	3468      	adds	r4, #104	; 0x68
 8003a72:	e7d9      	b.n	8003a28 <__sfp+0x1c>
 8003a74:	2104      	movs	r1, #4
 8003a76:	4638      	mov	r0, r7
 8003a78:	f7ff ff62 	bl	8003940 <__sfmoreglue>
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	6030      	str	r0, [r6, #0]
 8003a80:	2800      	cmp	r0, #0
 8003a82:	d1d5      	bne.n	8003a30 <__sfp+0x24>
 8003a84:	f7ff ff78 	bl	8003978 <__sfp_lock_release>
 8003a88:	230c      	movs	r3, #12
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	e7ee      	b.n	8003a6c <__sfp+0x60>
 8003a8e:	bf00      	nop
 8003a90:	08004898 	.word	0x08004898
 8003a94:	ffff0001 	.word	0xffff0001

08003a98 <_fwalk_reent>:
 8003a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a9c:	4606      	mov	r6, r0
 8003a9e:	4688      	mov	r8, r1
 8003aa0:	2700      	movs	r7, #0
 8003aa2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003aa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003aaa:	f1b9 0901 	subs.w	r9, r9, #1
 8003aae:	d505      	bpl.n	8003abc <_fwalk_reent+0x24>
 8003ab0:	6824      	ldr	r4, [r4, #0]
 8003ab2:	2c00      	cmp	r4, #0
 8003ab4:	d1f7      	bne.n	8003aa6 <_fwalk_reent+0xe>
 8003ab6:	4638      	mov	r0, r7
 8003ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003abc:	89ab      	ldrh	r3, [r5, #12]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d907      	bls.n	8003ad2 <_fwalk_reent+0x3a>
 8003ac2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	d003      	beq.n	8003ad2 <_fwalk_reent+0x3a>
 8003aca:	4629      	mov	r1, r5
 8003acc:	4630      	mov	r0, r6
 8003ace:	47c0      	blx	r8
 8003ad0:	4307      	orrs	r7, r0
 8003ad2:	3568      	adds	r5, #104	; 0x68
 8003ad4:	e7e9      	b.n	8003aaa <_fwalk_reent+0x12>

08003ad6 <__retarget_lock_init_recursive>:
 8003ad6:	4770      	bx	lr

08003ad8 <__retarget_lock_acquire_recursive>:
 8003ad8:	4770      	bx	lr

08003ada <__retarget_lock_release_recursive>:
 8003ada:	4770      	bx	lr

08003adc <sbrk_aligned>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	4e0e      	ldr	r6, [pc, #56]	; (8003b18 <sbrk_aligned+0x3c>)
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	6831      	ldr	r1, [r6, #0]
 8003ae4:	4605      	mov	r5, r0
 8003ae6:	b911      	cbnz	r1, 8003aee <sbrk_aligned+0x12>
 8003ae8:	f000 fb7a 	bl	80041e0 <_sbrk_r>
 8003aec:	6030      	str	r0, [r6, #0]
 8003aee:	4621      	mov	r1, r4
 8003af0:	4628      	mov	r0, r5
 8003af2:	f000 fb75 	bl	80041e0 <_sbrk_r>
 8003af6:	1c43      	adds	r3, r0, #1
 8003af8:	d00a      	beq.n	8003b10 <sbrk_aligned+0x34>
 8003afa:	1cc4      	adds	r4, r0, #3
 8003afc:	f024 0403 	bic.w	r4, r4, #3
 8003b00:	42a0      	cmp	r0, r4
 8003b02:	d007      	beq.n	8003b14 <sbrk_aligned+0x38>
 8003b04:	1a21      	subs	r1, r4, r0
 8003b06:	4628      	mov	r0, r5
 8003b08:	f000 fb6a 	bl	80041e0 <_sbrk_r>
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	d101      	bne.n	8003b14 <sbrk_aligned+0x38>
 8003b10:	f04f 34ff 	mov.w	r4, #4294967295
 8003b14:	4620      	mov	r0, r4
 8003b16:	bd70      	pop	{r4, r5, r6, pc}
 8003b18:	200001ac 	.word	0x200001ac

08003b1c <_malloc_r>:
 8003b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b20:	1ccd      	adds	r5, r1, #3
 8003b22:	f025 0503 	bic.w	r5, r5, #3
 8003b26:	3508      	adds	r5, #8
 8003b28:	2d0c      	cmp	r5, #12
 8003b2a:	bf38      	it	cc
 8003b2c:	250c      	movcc	r5, #12
 8003b2e:	2d00      	cmp	r5, #0
 8003b30:	4607      	mov	r7, r0
 8003b32:	db01      	blt.n	8003b38 <_malloc_r+0x1c>
 8003b34:	42a9      	cmp	r1, r5
 8003b36:	d905      	bls.n	8003b44 <_malloc_r+0x28>
 8003b38:	230c      	movs	r3, #12
 8003b3a:	2600      	movs	r6, #0
 8003b3c:	603b      	str	r3, [r7, #0]
 8003b3e:	4630      	mov	r0, r6
 8003b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b44:	4e2e      	ldr	r6, [pc, #184]	; (8003c00 <_malloc_r+0xe4>)
 8003b46:	f000 fdc5 	bl	80046d4 <__malloc_lock>
 8003b4a:	6833      	ldr	r3, [r6, #0]
 8003b4c:	461c      	mov	r4, r3
 8003b4e:	bb34      	cbnz	r4, 8003b9e <_malloc_r+0x82>
 8003b50:	4629      	mov	r1, r5
 8003b52:	4638      	mov	r0, r7
 8003b54:	f7ff ffc2 	bl	8003adc <sbrk_aligned>
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	d14d      	bne.n	8003bfa <_malloc_r+0xde>
 8003b5e:	6834      	ldr	r4, [r6, #0]
 8003b60:	4626      	mov	r6, r4
 8003b62:	2e00      	cmp	r6, #0
 8003b64:	d140      	bne.n	8003be8 <_malloc_r+0xcc>
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	4631      	mov	r1, r6
 8003b6a:	4638      	mov	r0, r7
 8003b6c:	eb04 0803 	add.w	r8, r4, r3
 8003b70:	f000 fb36 	bl	80041e0 <_sbrk_r>
 8003b74:	4580      	cmp	r8, r0
 8003b76:	d13a      	bne.n	8003bee <_malloc_r+0xd2>
 8003b78:	6821      	ldr	r1, [r4, #0]
 8003b7a:	3503      	adds	r5, #3
 8003b7c:	1a6d      	subs	r5, r5, r1
 8003b7e:	f025 0503 	bic.w	r5, r5, #3
 8003b82:	3508      	adds	r5, #8
 8003b84:	2d0c      	cmp	r5, #12
 8003b86:	bf38      	it	cc
 8003b88:	250c      	movcc	r5, #12
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	f7ff ffa5 	bl	8003adc <sbrk_aligned>
 8003b92:	3001      	adds	r0, #1
 8003b94:	d02b      	beq.n	8003bee <_malloc_r+0xd2>
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	442b      	add	r3, r5
 8003b9a:	6023      	str	r3, [r4, #0]
 8003b9c:	e00e      	b.n	8003bbc <_malloc_r+0xa0>
 8003b9e:	6822      	ldr	r2, [r4, #0]
 8003ba0:	1b52      	subs	r2, r2, r5
 8003ba2:	d41e      	bmi.n	8003be2 <_malloc_r+0xc6>
 8003ba4:	2a0b      	cmp	r2, #11
 8003ba6:	d916      	bls.n	8003bd6 <_malloc_r+0xba>
 8003ba8:	1961      	adds	r1, r4, r5
 8003baa:	42a3      	cmp	r3, r4
 8003bac:	6025      	str	r5, [r4, #0]
 8003bae:	bf18      	it	ne
 8003bb0:	6059      	strne	r1, [r3, #4]
 8003bb2:	6863      	ldr	r3, [r4, #4]
 8003bb4:	bf08      	it	eq
 8003bb6:	6031      	streq	r1, [r6, #0]
 8003bb8:	5162      	str	r2, [r4, r5]
 8003bba:	604b      	str	r3, [r1, #4]
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	f104 060b 	add.w	r6, r4, #11
 8003bc2:	f000 fd8d 	bl	80046e0 <__malloc_unlock>
 8003bc6:	f026 0607 	bic.w	r6, r6, #7
 8003bca:	1d23      	adds	r3, r4, #4
 8003bcc:	1af2      	subs	r2, r6, r3
 8003bce:	d0b6      	beq.n	8003b3e <_malloc_r+0x22>
 8003bd0:	1b9b      	subs	r3, r3, r6
 8003bd2:	50a3      	str	r3, [r4, r2]
 8003bd4:	e7b3      	b.n	8003b3e <_malloc_r+0x22>
 8003bd6:	6862      	ldr	r2, [r4, #4]
 8003bd8:	42a3      	cmp	r3, r4
 8003bda:	bf0c      	ite	eq
 8003bdc:	6032      	streq	r2, [r6, #0]
 8003bde:	605a      	strne	r2, [r3, #4]
 8003be0:	e7ec      	b.n	8003bbc <_malloc_r+0xa0>
 8003be2:	4623      	mov	r3, r4
 8003be4:	6864      	ldr	r4, [r4, #4]
 8003be6:	e7b2      	b.n	8003b4e <_malloc_r+0x32>
 8003be8:	4634      	mov	r4, r6
 8003bea:	6876      	ldr	r6, [r6, #4]
 8003bec:	e7b9      	b.n	8003b62 <_malloc_r+0x46>
 8003bee:	230c      	movs	r3, #12
 8003bf0:	4638      	mov	r0, r7
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	f000 fd74 	bl	80046e0 <__malloc_unlock>
 8003bf8:	e7a1      	b.n	8003b3e <_malloc_r+0x22>
 8003bfa:	6025      	str	r5, [r4, #0]
 8003bfc:	e7de      	b.n	8003bbc <_malloc_r+0xa0>
 8003bfe:	bf00      	nop
 8003c00:	200001a8 	.word	0x200001a8

08003c04 <__sfputc_r>:
 8003c04:	6893      	ldr	r3, [r2, #8]
 8003c06:	b410      	push	{r4}
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	6093      	str	r3, [r2, #8]
 8003c0e:	da07      	bge.n	8003c20 <__sfputc_r+0x1c>
 8003c10:	6994      	ldr	r4, [r2, #24]
 8003c12:	42a3      	cmp	r3, r4
 8003c14:	db01      	blt.n	8003c1a <__sfputc_r+0x16>
 8003c16:	290a      	cmp	r1, #10
 8003c18:	d102      	bne.n	8003c20 <__sfputc_r+0x1c>
 8003c1a:	bc10      	pop	{r4}
 8003c1c:	f000 bb34 	b.w	8004288 <__swbuf_r>
 8003c20:	6813      	ldr	r3, [r2, #0]
 8003c22:	1c58      	adds	r0, r3, #1
 8003c24:	6010      	str	r0, [r2, #0]
 8003c26:	7019      	strb	r1, [r3, #0]
 8003c28:	4608      	mov	r0, r1
 8003c2a:	bc10      	pop	{r4}
 8003c2c:	4770      	bx	lr

08003c2e <__sfputs_r>:
 8003c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c30:	4606      	mov	r6, r0
 8003c32:	460f      	mov	r7, r1
 8003c34:	4614      	mov	r4, r2
 8003c36:	18d5      	adds	r5, r2, r3
 8003c38:	42ac      	cmp	r4, r5
 8003c3a:	d101      	bne.n	8003c40 <__sfputs_r+0x12>
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	e007      	b.n	8003c50 <__sfputs_r+0x22>
 8003c40:	463a      	mov	r2, r7
 8003c42:	4630      	mov	r0, r6
 8003c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c48:	f7ff ffdc 	bl	8003c04 <__sfputc_r>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d1f3      	bne.n	8003c38 <__sfputs_r+0xa>
 8003c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c54 <_vfiprintf_r>:
 8003c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c58:	460d      	mov	r5, r1
 8003c5a:	4614      	mov	r4, r2
 8003c5c:	4698      	mov	r8, r3
 8003c5e:	4606      	mov	r6, r0
 8003c60:	b09d      	sub	sp, #116	; 0x74
 8003c62:	b118      	cbz	r0, 8003c6c <_vfiprintf_r+0x18>
 8003c64:	6983      	ldr	r3, [r0, #24]
 8003c66:	b90b      	cbnz	r3, 8003c6c <_vfiprintf_r+0x18>
 8003c68:	f7ff fe98 	bl	800399c <__sinit>
 8003c6c:	4b89      	ldr	r3, [pc, #548]	; (8003e94 <_vfiprintf_r+0x240>)
 8003c6e:	429d      	cmp	r5, r3
 8003c70:	d11b      	bne.n	8003caa <_vfiprintf_r+0x56>
 8003c72:	6875      	ldr	r5, [r6, #4]
 8003c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c76:	07d9      	lsls	r1, r3, #31
 8003c78:	d405      	bmi.n	8003c86 <_vfiprintf_r+0x32>
 8003c7a:	89ab      	ldrh	r3, [r5, #12]
 8003c7c:	059a      	lsls	r2, r3, #22
 8003c7e:	d402      	bmi.n	8003c86 <_vfiprintf_r+0x32>
 8003c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c82:	f7ff ff29 	bl	8003ad8 <__retarget_lock_acquire_recursive>
 8003c86:	89ab      	ldrh	r3, [r5, #12]
 8003c88:	071b      	lsls	r3, r3, #28
 8003c8a:	d501      	bpl.n	8003c90 <_vfiprintf_r+0x3c>
 8003c8c:	692b      	ldr	r3, [r5, #16]
 8003c8e:	b9eb      	cbnz	r3, 8003ccc <_vfiprintf_r+0x78>
 8003c90:	4629      	mov	r1, r5
 8003c92:	4630      	mov	r0, r6
 8003c94:	f000 fb5c 	bl	8004350 <__swsetup_r>
 8003c98:	b1c0      	cbz	r0, 8003ccc <_vfiprintf_r+0x78>
 8003c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c9c:	07dc      	lsls	r4, r3, #31
 8003c9e:	d50e      	bpl.n	8003cbe <_vfiprintf_r+0x6a>
 8003ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca4:	b01d      	add	sp, #116	; 0x74
 8003ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003caa:	4b7b      	ldr	r3, [pc, #492]	; (8003e98 <_vfiprintf_r+0x244>)
 8003cac:	429d      	cmp	r5, r3
 8003cae:	d101      	bne.n	8003cb4 <_vfiprintf_r+0x60>
 8003cb0:	68b5      	ldr	r5, [r6, #8]
 8003cb2:	e7df      	b.n	8003c74 <_vfiprintf_r+0x20>
 8003cb4:	4b79      	ldr	r3, [pc, #484]	; (8003e9c <_vfiprintf_r+0x248>)
 8003cb6:	429d      	cmp	r5, r3
 8003cb8:	bf08      	it	eq
 8003cba:	68f5      	ldreq	r5, [r6, #12]
 8003cbc:	e7da      	b.n	8003c74 <_vfiprintf_r+0x20>
 8003cbe:	89ab      	ldrh	r3, [r5, #12]
 8003cc0:	0598      	lsls	r0, r3, #22
 8003cc2:	d4ed      	bmi.n	8003ca0 <_vfiprintf_r+0x4c>
 8003cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cc6:	f7ff ff08 	bl	8003ada <__retarget_lock_release_recursive>
 8003cca:	e7e9      	b.n	8003ca0 <_vfiprintf_r+0x4c>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	9309      	str	r3, [sp, #36]	; 0x24
 8003cd0:	2320      	movs	r3, #32
 8003cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cd6:	2330      	movs	r3, #48	; 0x30
 8003cd8:	f04f 0901 	mov.w	r9, #1
 8003cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ce0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003ea0 <_vfiprintf_r+0x24c>
 8003ce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ce8:	4623      	mov	r3, r4
 8003cea:	469a      	mov	sl, r3
 8003cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cf0:	b10a      	cbz	r2, 8003cf6 <_vfiprintf_r+0xa2>
 8003cf2:	2a25      	cmp	r2, #37	; 0x25
 8003cf4:	d1f9      	bne.n	8003cea <_vfiprintf_r+0x96>
 8003cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8003cfa:	d00b      	beq.n	8003d14 <_vfiprintf_r+0xc0>
 8003cfc:	465b      	mov	r3, fp
 8003cfe:	4622      	mov	r2, r4
 8003d00:	4629      	mov	r1, r5
 8003d02:	4630      	mov	r0, r6
 8003d04:	f7ff ff93 	bl	8003c2e <__sfputs_r>
 8003d08:	3001      	adds	r0, #1
 8003d0a:	f000 80aa 	beq.w	8003e62 <_vfiprintf_r+0x20e>
 8003d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d10:	445a      	add	r2, fp
 8003d12:	9209      	str	r2, [sp, #36]	; 0x24
 8003d14:	f89a 3000 	ldrb.w	r3, [sl]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80a2 	beq.w	8003e62 <_vfiprintf_r+0x20e>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f04f 32ff 	mov.w	r2, #4294967295
 8003d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d28:	f10a 0a01 	add.w	sl, sl, #1
 8003d2c:	9304      	str	r3, [sp, #16]
 8003d2e:	9307      	str	r3, [sp, #28]
 8003d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d34:	931a      	str	r3, [sp, #104]	; 0x68
 8003d36:	4654      	mov	r4, sl
 8003d38:	2205      	movs	r2, #5
 8003d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d3e:	4858      	ldr	r0, [pc, #352]	; (8003ea0 <_vfiprintf_r+0x24c>)
 8003d40:	f000 fcba 	bl	80046b8 <memchr>
 8003d44:	9a04      	ldr	r2, [sp, #16]
 8003d46:	b9d8      	cbnz	r0, 8003d80 <_vfiprintf_r+0x12c>
 8003d48:	06d1      	lsls	r1, r2, #27
 8003d4a:	bf44      	itt	mi
 8003d4c:	2320      	movmi	r3, #32
 8003d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d52:	0713      	lsls	r3, r2, #28
 8003d54:	bf44      	itt	mi
 8003d56:	232b      	movmi	r3, #43	; 0x2b
 8003d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8003d60:	2b2a      	cmp	r3, #42	; 0x2a
 8003d62:	d015      	beq.n	8003d90 <_vfiprintf_r+0x13c>
 8003d64:	4654      	mov	r4, sl
 8003d66:	2000      	movs	r0, #0
 8003d68:	f04f 0c0a 	mov.w	ip, #10
 8003d6c:	9a07      	ldr	r2, [sp, #28]
 8003d6e:	4621      	mov	r1, r4
 8003d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d74:	3b30      	subs	r3, #48	; 0x30
 8003d76:	2b09      	cmp	r3, #9
 8003d78:	d94e      	bls.n	8003e18 <_vfiprintf_r+0x1c4>
 8003d7a:	b1b0      	cbz	r0, 8003daa <_vfiprintf_r+0x156>
 8003d7c:	9207      	str	r2, [sp, #28]
 8003d7e:	e014      	b.n	8003daa <_vfiprintf_r+0x156>
 8003d80:	eba0 0308 	sub.w	r3, r0, r8
 8003d84:	fa09 f303 	lsl.w	r3, r9, r3
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	46a2      	mov	sl, r4
 8003d8c:	9304      	str	r3, [sp, #16]
 8003d8e:	e7d2      	b.n	8003d36 <_vfiprintf_r+0xe2>
 8003d90:	9b03      	ldr	r3, [sp, #12]
 8003d92:	1d19      	adds	r1, r3, #4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	9103      	str	r1, [sp, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bfbb      	ittet	lt
 8003d9c:	425b      	neglt	r3, r3
 8003d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8003da2:	9307      	strge	r3, [sp, #28]
 8003da4:	9307      	strlt	r3, [sp, #28]
 8003da6:	bfb8      	it	lt
 8003da8:	9204      	strlt	r2, [sp, #16]
 8003daa:	7823      	ldrb	r3, [r4, #0]
 8003dac:	2b2e      	cmp	r3, #46	; 0x2e
 8003dae:	d10c      	bne.n	8003dca <_vfiprintf_r+0x176>
 8003db0:	7863      	ldrb	r3, [r4, #1]
 8003db2:	2b2a      	cmp	r3, #42	; 0x2a
 8003db4:	d135      	bne.n	8003e22 <_vfiprintf_r+0x1ce>
 8003db6:	9b03      	ldr	r3, [sp, #12]
 8003db8:	3402      	adds	r4, #2
 8003dba:	1d1a      	adds	r2, r3, #4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	9203      	str	r2, [sp, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bfb8      	it	lt
 8003dc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003dc8:	9305      	str	r3, [sp, #20]
 8003dca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003ea4 <_vfiprintf_r+0x250>
 8003dce:	2203      	movs	r2, #3
 8003dd0:	4650      	mov	r0, sl
 8003dd2:	7821      	ldrb	r1, [r4, #0]
 8003dd4:	f000 fc70 	bl	80046b8 <memchr>
 8003dd8:	b140      	cbz	r0, 8003dec <_vfiprintf_r+0x198>
 8003dda:	2340      	movs	r3, #64	; 0x40
 8003ddc:	eba0 000a 	sub.w	r0, r0, sl
 8003de0:	fa03 f000 	lsl.w	r0, r3, r0
 8003de4:	9b04      	ldr	r3, [sp, #16]
 8003de6:	3401      	adds	r4, #1
 8003de8:	4303      	orrs	r3, r0
 8003dea:	9304      	str	r3, [sp, #16]
 8003dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df0:	2206      	movs	r2, #6
 8003df2:	482d      	ldr	r0, [pc, #180]	; (8003ea8 <_vfiprintf_r+0x254>)
 8003df4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003df8:	f000 fc5e 	bl	80046b8 <memchr>
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d03f      	beq.n	8003e80 <_vfiprintf_r+0x22c>
 8003e00:	4b2a      	ldr	r3, [pc, #168]	; (8003eac <_vfiprintf_r+0x258>)
 8003e02:	bb1b      	cbnz	r3, 8003e4c <_vfiprintf_r+0x1f8>
 8003e04:	9b03      	ldr	r3, [sp, #12]
 8003e06:	3307      	adds	r3, #7
 8003e08:	f023 0307 	bic.w	r3, r3, #7
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	9303      	str	r3, [sp, #12]
 8003e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e12:	443b      	add	r3, r7
 8003e14:	9309      	str	r3, [sp, #36]	; 0x24
 8003e16:	e767      	b.n	8003ce8 <_vfiprintf_r+0x94>
 8003e18:	460c      	mov	r4, r1
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e20:	e7a5      	b.n	8003d6e <_vfiprintf_r+0x11a>
 8003e22:	2300      	movs	r3, #0
 8003e24:	f04f 0c0a 	mov.w	ip, #10
 8003e28:	4619      	mov	r1, r3
 8003e2a:	3401      	adds	r4, #1
 8003e2c:	9305      	str	r3, [sp, #20]
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e34:	3a30      	subs	r2, #48	; 0x30
 8003e36:	2a09      	cmp	r2, #9
 8003e38:	d903      	bls.n	8003e42 <_vfiprintf_r+0x1ee>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0c5      	beq.n	8003dca <_vfiprintf_r+0x176>
 8003e3e:	9105      	str	r1, [sp, #20]
 8003e40:	e7c3      	b.n	8003dca <_vfiprintf_r+0x176>
 8003e42:	4604      	mov	r4, r0
 8003e44:	2301      	movs	r3, #1
 8003e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e4a:	e7f0      	b.n	8003e2e <_vfiprintf_r+0x1da>
 8003e4c:	ab03      	add	r3, sp, #12
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	462a      	mov	r2, r5
 8003e52:	4630      	mov	r0, r6
 8003e54:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <_vfiprintf_r+0x25c>)
 8003e56:	a904      	add	r1, sp, #16
 8003e58:	f3af 8000 	nop.w
 8003e5c:	4607      	mov	r7, r0
 8003e5e:	1c78      	adds	r0, r7, #1
 8003e60:	d1d6      	bne.n	8003e10 <_vfiprintf_r+0x1bc>
 8003e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e64:	07d9      	lsls	r1, r3, #31
 8003e66:	d405      	bmi.n	8003e74 <_vfiprintf_r+0x220>
 8003e68:	89ab      	ldrh	r3, [r5, #12]
 8003e6a:	059a      	lsls	r2, r3, #22
 8003e6c:	d402      	bmi.n	8003e74 <_vfiprintf_r+0x220>
 8003e6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e70:	f7ff fe33 	bl	8003ada <__retarget_lock_release_recursive>
 8003e74:	89ab      	ldrh	r3, [r5, #12]
 8003e76:	065b      	lsls	r3, r3, #25
 8003e78:	f53f af12 	bmi.w	8003ca0 <_vfiprintf_r+0x4c>
 8003e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e7e:	e711      	b.n	8003ca4 <_vfiprintf_r+0x50>
 8003e80:	ab03      	add	r3, sp, #12
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	462a      	mov	r2, r5
 8003e86:	4630      	mov	r0, r6
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <_vfiprintf_r+0x25c>)
 8003e8a:	a904      	add	r1, sp, #16
 8003e8c:	f000 f882 	bl	8003f94 <_printf_i>
 8003e90:	e7e4      	b.n	8003e5c <_vfiprintf_r+0x208>
 8003e92:	bf00      	nop
 8003e94:	080048bc 	.word	0x080048bc
 8003e98:	080048dc 	.word	0x080048dc
 8003e9c:	0800489c 	.word	0x0800489c
 8003ea0:	080048fc 	.word	0x080048fc
 8003ea4:	08004902 	.word	0x08004902
 8003ea8:	08004906 	.word	0x08004906
 8003eac:	00000000 	.word	0x00000000
 8003eb0:	08003c2f 	.word	0x08003c2f

08003eb4 <_printf_common>:
 8003eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb8:	4616      	mov	r6, r2
 8003eba:	4699      	mov	r9, r3
 8003ebc:	688a      	ldr	r2, [r1, #8]
 8003ebe:	690b      	ldr	r3, [r1, #16]
 8003ec0:	4607      	mov	r7, r0
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	bfb8      	it	lt
 8003ec6:	4613      	movlt	r3, r2
 8003ec8:	6033      	str	r3, [r6, #0]
 8003eca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ece:	460c      	mov	r4, r1
 8003ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ed4:	b10a      	cbz	r2, 8003eda <_printf_common+0x26>
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	6033      	str	r3, [r6, #0]
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	0699      	lsls	r1, r3, #26
 8003ede:	bf42      	ittt	mi
 8003ee0:	6833      	ldrmi	r3, [r6, #0]
 8003ee2:	3302      	addmi	r3, #2
 8003ee4:	6033      	strmi	r3, [r6, #0]
 8003ee6:	6825      	ldr	r5, [r4, #0]
 8003ee8:	f015 0506 	ands.w	r5, r5, #6
 8003eec:	d106      	bne.n	8003efc <_printf_common+0x48>
 8003eee:	f104 0a19 	add.w	sl, r4, #25
 8003ef2:	68e3      	ldr	r3, [r4, #12]
 8003ef4:	6832      	ldr	r2, [r6, #0]
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	42ab      	cmp	r3, r5
 8003efa:	dc28      	bgt.n	8003f4e <_printf_common+0x9a>
 8003efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f00:	1e13      	subs	r3, r2, #0
 8003f02:	6822      	ldr	r2, [r4, #0]
 8003f04:	bf18      	it	ne
 8003f06:	2301      	movne	r3, #1
 8003f08:	0692      	lsls	r2, r2, #26
 8003f0a:	d42d      	bmi.n	8003f68 <_printf_common+0xb4>
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	4638      	mov	r0, r7
 8003f10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f14:	47c0      	blx	r8
 8003f16:	3001      	adds	r0, #1
 8003f18:	d020      	beq.n	8003f5c <_printf_common+0xa8>
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	68e5      	ldr	r5, [r4, #12]
 8003f1e:	f003 0306 	and.w	r3, r3, #6
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	bf18      	it	ne
 8003f26:	2500      	movne	r5, #0
 8003f28:	6832      	ldr	r2, [r6, #0]
 8003f2a:	f04f 0600 	mov.w	r6, #0
 8003f2e:	68a3      	ldr	r3, [r4, #8]
 8003f30:	bf08      	it	eq
 8003f32:	1aad      	subeq	r5, r5, r2
 8003f34:	6922      	ldr	r2, [r4, #16]
 8003f36:	bf08      	it	eq
 8003f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	bfc4      	itt	gt
 8003f40:	1a9b      	subgt	r3, r3, r2
 8003f42:	18ed      	addgt	r5, r5, r3
 8003f44:	341a      	adds	r4, #26
 8003f46:	42b5      	cmp	r5, r6
 8003f48:	d11a      	bne.n	8003f80 <_printf_common+0xcc>
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	e008      	b.n	8003f60 <_printf_common+0xac>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	4652      	mov	r2, sl
 8003f52:	4649      	mov	r1, r9
 8003f54:	4638      	mov	r0, r7
 8003f56:	47c0      	blx	r8
 8003f58:	3001      	adds	r0, #1
 8003f5a:	d103      	bne.n	8003f64 <_printf_common+0xb0>
 8003f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f64:	3501      	adds	r5, #1
 8003f66:	e7c4      	b.n	8003ef2 <_printf_common+0x3e>
 8003f68:	2030      	movs	r0, #48	; 0x30
 8003f6a:	18e1      	adds	r1, r4, r3
 8003f6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f76:	4422      	add	r2, r4
 8003f78:	3302      	adds	r3, #2
 8003f7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f7e:	e7c5      	b.n	8003f0c <_printf_common+0x58>
 8003f80:	2301      	movs	r3, #1
 8003f82:	4622      	mov	r2, r4
 8003f84:	4649      	mov	r1, r9
 8003f86:	4638      	mov	r0, r7
 8003f88:	47c0      	blx	r8
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	d0e6      	beq.n	8003f5c <_printf_common+0xa8>
 8003f8e:	3601      	adds	r6, #1
 8003f90:	e7d9      	b.n	8003f46 <_printf_common+0x92>
	...

08003f94 <_printf_i>:
 8003f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f98:	7e0f      	ldrb	r7, [r1, #24]
 8003f9a:	4691      	mov	r9, r2
 8003f9c:	2f78      	cmp	r7, #120	; 0x78
 8003f9e:	4680      	mov	r8, r0
 8003fa0:	460c      	mov	r4, r1
 8003fa2:	469a      	mov	sl, r3
 8003fa4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003faa:	d807      	bhi.n	8003fbc <_printf_i+0x28>
 8003fac:	2f62      	cmp	r7, #98	; 0x62
 8003fae:	d80a      	bhi.n	8003fc6 <_printf_i+0x32>
 8003fb0:	2f00      	cmp	r7, #0
 8003fb2:	f000 80d9 	beq.w	8004168 <_printf_i+0x1d4>
 8003fb6:	2f58      	cmp	r7, #88	; 0x58
 8003fb8:	f000 80a4 	beq.w	8004104 <_printf_i+0x170>
 8003fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fc4:	e03a      	b.n	800403c <_printf_i+0xa8>
 8003fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fca:	2b15      	cmp	r3, #21
 8003fcc:	d8f6      	bhi.n	8003fbc <_printf_i+0x28>
 8003fce:	a101      	add	r1, pc, #4	; (adr r1, 8003fd4 <_printf_i+0x40>)
 8003fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fd4:	0800402d 	.word	0x0800402d
 8003fd8:	08004041 	.word	0x08004041
 8003fdc:	08003fbd 	.word	0x08003fbd
 8003fe0:	08003fbd 	.word	0x08003fbd
 8003fe4:	08003fbd 	.word	0x08003fbd
 8003fe8:	08003fbd 	.word	0x08003fbd
 8003fec:	08004041 	.word	0x08004041
 8003ff0:	08003fbd 	.word	0x08003fbd
 8003ff4:	08003fbd 	.word	0x08003fbd
 8003ff8:	08003fbd 	.word	0x08003fbd
 8003ffc:	08003fbd 	.word	0x08003fbd
 8004000:	0800414f 	.word	0x0800414f
 8004004:	08004071 	.word	0x08004071
 8004008:	08004131 	.word	0x08004131
 800400c:	08003fbd 	.word	0x08003fbd
 8004010:	08003fbd 	.word	0x08003fbd
 8004014:	08004171 	.word	0x08004171
 8004018:	08003fbd 	.word	0x08003fbd
 800401c:	08004071 	.word	0x08004071
 8004020:	08003fbd 	.word	0x08003fbd
 8004024:	08003fbd 	.word	0x08003fbd
 8004028:	08004139 	.word	0x08004139
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	1d1a      	adds	r2, r3, #4
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	602a      	str	r2, [r5, #0]
 8004034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800403c:	2301      	movs	r3, #1
 800403e:	e0a4      	b.n	800418a <_printf_i+0x1f6>
 8004040:	6820      	ldr	r0, [r4, #0]
 8004042:	6829      	ldr	r1, [r5, #0]
 8004044:	0606      	lsls	r6, r0, #24
 8004046:	f101 0304 	add.w	r3, r1, #4
 800404a:	d50a      	bpl.n	8004062 <_printf_i+0xce>
 800404c:	680e      	ldr	r6, [r1, #0]
 800404e:	602b      	str	r3, [r5, #0]
 8004050:	2e00      	cmp	r6, #0
 8004052:	da03      	bge.n	800405c <_printf_i+0xc8>
 8004054:	232d      	movs	r3, #45	; 0x2d
 8004056:	4276      	negs	r6, r6
 8004058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800405c:	230a      	movs	r3, #10
 800405e:	485e      	ldr	r0, [pc, #376]	; (80041d8 <_printf_i+0x244>)
 8004060:	e019      	b.n	8004096 <_printf_i+0x102>
 8004062:	680e      	ldr	r6, [r1, #0]
 8004064:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004068:	602b      	str	r3, [r5, #0]
 800406a:	bf18      	it	ne
 800406c:	b236      	sxthne	r6, r6
 800406e:	e7ef      	b.n	8004050 <_printf_i+0xbc>
 8004070:	682b      	ldr	r3, [r5, #0]
 8004072:	6820      	ldr	r0, [r4, #0]
 8004074:	1d19      	adds	r1, r3, #4
 8004076:	6029      	str	r1, [r5, #0]
 8004078:	0601      	lsls	r1, r0, #24
 800407a:	d501      	bpl.n	8004080 <_printf_i+0xec>
 800407c:	681e      	ldr	r6, [r3, #0]
 800407e:	e002      	b.n	8004086 <_printf_i+0xf2>
 8004080:	0646      	lsls	r6, r0, #25
 8004082:	d5fb      	bpl.n	800407c <_printf_i+0xe8>
 8004084:	881e      	ldrh	r6, [r3, #0]
 8004086:	2f6f      	cmp	r7, #111	; 0x6f
 8004088:	bf0c      	ite	eq
 800408a:	2308      	moveq	r3, #8
 800408c:	230a      	movne	r3, #10
 800408e:	4852      	ldr	r0, [pc, #328]	; (80041d8 <_printf_i+0x244>)
 8004090:	2100      	movs	r1, #0
 8004092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004096:	6865      	ldr	r5, [r4, #4]
 8004098:	2d00      	cmp	r5, #0
 800409a:	bfa8      	it	ge
 800409c:	6821      	ldrge	r1, [r4, #0]
 800409e:	60a5      	str	r5, [r4, #8]
 80040a0:	bfa4      	itt	ge
 80040a2:	f021 0104 	bicge.w	r1, r1, #4
 80040a6:	6021      	strge	r1, [r4, #0]
 80040a8:	b90e      	cbnz	r6, 80040ae <_printf_i+0x11a>
 80040aa:	2d00      	cmp	r5, #0
 80040ac:	d04d      	beq.n	800414a <_printf_i+0x1b6>
 80040ae:	4615      	mov	r5, r2
 80040b0:	fbb6 f1f3 	udiv	r1, r6, r3
 80040b4:	fb03 6711 	mls	r7, r3, r1, r6
 80040b8:	5dc7      	ldrb	r7, [r0, r7]
 80040ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040be:	4637      	mov	r7, r6
 80040c0:	42bb      	cmp	r3, r7
 80040c2:	460e      	mov	r6, r1
 80040c4:	d9f4      	bls.n	80040b0 <_printf_i+0x11c>
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d10b      	bne.n	80040e2 <_printf_i+0x14e>
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	07de      	lsls	r6, r3, #31
 80040ce:	d508      	bpl.n	80040e2 <_printf_i+0x14e>
 80040d0:	6923      	ldr	r3, [r4, #16]
 80040d2:	6861      	ldr	r1, [r4, #4]
 80040d4:	4299      	cmp	r1, r3
 80040d6:	bfde      	ittt	le
 80040d8:	2330      	movle	r3, #48	; 0x30
 80040da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040e2:	1b52      	subs	r2, r2, r5
 80040e4:	6122      	str	r2, [r4, #16]
 80040e6:	464b      	mov	r3, r9
 80040e8:	4621      	mov	r1, r4
 80040ea:	4640      	mov	r0, r8
 80040ec:	f8cd a000 	str.w	sl, [sp]
 80040f0:	aa03      	add	r2, sp, #12
 80040f2:	f7ff fedf 	bl	8003eb4 <_printf_common>
 80040f6:	3001      	adds	r0, #1
 80040f8:	d14c      	bne.n	8004194 <_printf_i+0x200>
 80040fa:	f04f 30ff 	mov.w	r0, #4294967295
 80040fe:	b004      	add	sp, #16
 8004100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004104:	4834      	ldr	r0, [pc, #208]	; (80041d8 <_printf_i+0x244>)
 8004106:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800410a:	6829      	ldr	r1, [r5, #0]
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004112:	6029      	str	r1, [r5, #0]
 8004114:	061d      	lsls	r5, r3, #24
 8004116:	d514      	bpl.n	8004142 <_printf_i+0x1ae>
 8004118:	07df      	lsls	r7, r3, #31
 800411a:	bf44      	itt	mi
 800411c:	f043 0320 	orrmi.w	r3, r3, #32
 8004120:	6023      	strmi	r3, [r4, #0]
 8004122:	b91e      	cbnz	r6, 800412c <_printf_i+0x198>
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	f023 0320 	bic.w	r3, r3, #32
 800412a:	6023      	str	r3, [r4, #0]
 800412c:	2310      	movs	r3, #16
 800412e:	e7af      	b.n	8004090 <_printf_i+0xfc>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	f043 0320 	orr.w	r3, r3, #32
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	2378      	movs	r3, #120	; 0x78
 800413a:	4828      	ldr	r0, [pc, #160]	; (80041dc <_printf_i+0x248>)
 800413c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004140:	e7e3      	b.n	800410a <_printf_i+0x176>
 8004142:	0659      	lsls	r1, r3, #25
 8004144:	bf48      	it	mi
 8004146:	b2b6      	uxthmi	r6, r6
 8004148:	e7e6      	b.n	8004118 <_printf_i+0x184>
 800414a:	4615      	mov	r5, r2
 800414c:	e7bb      	b.n	80040c6 <_printf_i+0x132>
 800414e:	682b      	ldr	r3, [r5, #0]
 8004150:	6826      	ldr	r6, [r4, #0]
 8004152:	1d18      	adds	r0, r3, #4
 8004154:	6961      	ldr	r1, [r4, #20]
 8004156:	6028      	str	r0, [r5, #0]
 8004158:	0635      	lsls	r5, r6, #24
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	d501      	bpl.n	8004162 <_printf_i+0x1ce>
 800415e:	6019      	str	r1, [r3, #0]
 8004160:	e002      	b.n	8004168 <_printf_i+0x1d4>
 8004162:	0670      	lsls	r0, r6, #25
 8004164:	d5fb      	bpl.n	800415e <_printf_i+0x1ca>
 8004166:	8019      	strh	r1, [r3, #0]
 8004168:	2300      	movs	r3, #0
 800416a:	4615      	mov	r5, r2
 800416c:	6123      	str	r3, [r4, #16]
 800416e:	e7ba      	b.n	80040e6 <_printf_i+0x152>
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	2100      	movs	r1, #0
 8004174:	1d1a      	adds	r2, r3, #4
 8004176:	602a      	str	r2, [r5, #0]
 8004178:	681d      	ldr	r5, [r3, #0]
 800417a:	6862      	ldr	r2, [r4, #4]
 800417c:	4628      	mov	r0, r5
 800417e:	f000 fa9b 	bl	80046b8 <memchr>
 8004182:	b108      	cbz	r0, 8004188 <_printf_i+0x1f4>
 8004184:	1b40      	subs	r0, r0, r5
 8004186:	6060      	str	r0, [r4, #4]
 8004188:	6863      	ldr	r3, [r4, #4]
 800418a:	6123      	str	r3, [r4, #16]
 800418c:	2300      	movs	r3, #0
 800418e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004192:	e7a8      	b.n	80040e6 <_printf_i+0x152>
 8004194:	462a      	mov	r2, r5
 8004196:	4649      	mov	r1, r9
 8004198:	4640      	mov	r0, r8
 800419a:	6923      	ldr	r3, [r4, #16]
 800419c:	47d0      	blx	sl
 800419e:	3001      	adds	r0, #1
 80041a0:	d0ab      	beq.n	80040fa <_printf_i+0x166>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	079b      	lsls	r3, r3, #30
 80041a6:	d413      	bmi.n	80041d0 <_printf_i+0x23c>
 80041a8:	68e0      	ldr	r0, [r4, #12]
 80041aa:	9b03      	ldr	r3, [sp, #12]
 80041ac:	4298      	cmp	r0, r3
 80041ae:	bfb8      	it	lt
 80041b0:	4618      	movlt	r0, r3
 80041b2:	e7a4      	b.n	80040fe <_printf_i+0x16a>
 80041b4:	2301      	movs	r3, #1
 80041b6:	4632      	mov	r2, r6
 80041b8:	4649      	mov	r1, r9
 80041ba:	4640      	mov	r0, r8
 80041bc:	47d0      	blx	sl
 80041be:	3001      	adds	r0, #1
 80041c0:	d09b      	beq.n	80040fa <_printf_i+0x166>
 80041c2:	3501      	adds	r5, #1
 80041c4:	68e3      	ldr	r3, [r4, #12]
 80041c6:	9903      	ldr	r1, [sp, #12]
 80041c8:	1a5b      	subs	r3, r3, r1
 80041ca:	42ab      	cmp	r3, r5
 80041cc:	dcf2      	bgt.n	80041b4 <_printf_i+0x220>
 80041ce:	e7eb      	b.n	80041a8 <_printf_i+0x214>
 80041d0:	2500      	movs	r5, #0
 80041d2:	f104 0619 	add.w	r6, r4, #25
 80041d6:	e7f5      	b.n	80041c4 <_printf_i+0x230>
 80041d8:	0800490d 	.word	0x0800490d
 80041dc:	0800491e 	.word	0x0800491e

080041e0 <_sbrk_r>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	2300      	movs	r3, #0
 80041e4:	4d05      	ldr	r5, [pc, #20]	; (80041fc <_sbrk_r+0x1c>)
 80041e6:	4604      	mov	r4, r0
 80041e8:	4608      	mov	r0, r1
 80041ea:	602b      	str	r3, [r5, #0]
 80041ec:	f7fc fd0a 	bl	8000c04 <_sbrk>
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	d102      	bne.n	80041fa <_sbrk_r+0x1a>
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	b103      	cbz	r3, 80041fa <_sbrk_r+0x1a>
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	bd38      	pop	{r3, r4, r5, pc}
 80041fc:	200001b0 	.word	0x200001b0

08004200 <__sread>:
 8004200:	b510      	push	{r4, lr}
 8004202:	460c      	mov	r4, r1
 8004204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004208:	f000 fab8 	bl	800477c <_read_r>
 800420c:	2800      	cmp	r0, #0
 800420e:	bfab      	itete	ge
 8004210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004212:	89a3      	ldrhlt	r3, [r4, #12]
 8004214:	181b      	addge	r3, r3, r0
 8004216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800421a:	bfac      	ite	ge
 800421c:	6563      	strge	r3, [r4, #84]	; 0x54
 800421e:	81a3      	strhlt	r3, [r4, #12]
 8004220:	bd10      	pop	{r4, pc}

08004222 <__swrite>:
 8004222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004226:	461f      	mov	r7, r3
 8004228:	898b      	ldrh	r3, [r1, #12]
 800422a:	4605      	mov	r5, r0
 800422c:	05db      	lsls	r3, r3, #23
 800422e:	460c      	mov	r4, r1
 8004230:	4616      	mov	r6, r2
 8004232:	d505      	bpl.n	8004240 <__swrite+0x1e>
 8004234:	2302      	movs	r3, #2
 8004236:	2200      	movs	r2, #0
 8004238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800423c:	f000 f9c4 	bl	80045c8 <_lseek_r>
 8004240:	89a3      	ldrh	r3, [r4, #12]
 8004242:	4632      	mov	r2, r6
 8004244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004248:	81a3      	strh	r3, [r4, #12]
 800424a:	4628      	mov	r0, r5
 800424c:	463b      	mov	r3, r7
 800424e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004256:	f000 b869 	b.w	800432c <_write_r>

0800425a <__sseek>:
 800425a:	b510      	push	{r4, lr}
 800425c:	460c      	mov	r4, r1
 800425e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004262:	f000 f9b1 	bl	80045c8 <_lseek_r>
 8004266:	1c43      	adds	r3, r0, #1
 8004268:	89a3      	ldrh	r3, [r4, #12]
 800426a:	bf15      	itete	ne
 800426c:	6560      	strne	r0, [r4, #84]	; 0x54
 800426e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004276:	81a3      	strheq	r3, [r4, #12]
 8004278:	bf18      	it	ne
 800427a:	81a3      	strhne	r3, [r4, #12]
 800427c:	bd10      	pop	{r4, pc}

0800427e <__sclose>:
 800427e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004282:	f000 b8d3 	b.w	800442c <_close_r>
	...

08004288 <__swbuf_r>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	460e      	mov	r6, r1
 800428c:	4614      	mov	r4, r2
 800428e:	4605      	mov	r5, r0
 8004290:	b118      	cbz	r0, 800429a <__swbuf_r+0x12>
 8004292:	6983      	ldr	r3, [r0, #24]
 8004294:	b90b      	cbnz	r3, 800429a <__swbuf_r+0x12>
 8004296:	f7ff fb81 	bl	800399c <__sinit>
 800429a:	4b21      	ldr	r3, [pc, #132]	; (8004320 <__swbuf_r+0x98>)
 800429c:	429c      	cmp	r4, r3
 800429e:	d12b      	bne.n	80042f8 <__swbuf_r+0x70>
 80042a0:	686c      	ldr	r4, [r5, #4]
 80042a2:	69a3      	ldr	r3, [r4, #24]
 80042a4:	60a3      	str	r3, [r4, #8]
 80042a6:	89a3      	ldrh	r3, [r4, #12]
 80042a8:	071a      	lsls	r2, r3, #28
 80042aa:	d52f      	bpl.n	800430c <__swbuf_r+0x84>
 80042ac:	6923      	ldr	r3, [r4, #16]
 80042ae:	b36b      	cbz	r3, 800430c <__swbuf_r+0x84>
 80042b0:	6923      	ldr	r3, [r4, #16]
 80042b2:	6820      	ldr	r0, [r4, #0]
 80042b4:	b2f6      	uxtb	r6, r6
 80042b6:	1ac0      	subs	r0, r0, r3
 80042b8:	6963      	ldr	r3, [r4, #20]
 80042ba:	4637      	mov	r7, r6
 80042bc:	4283      	cmp	r3, r0
 80042be:	dc04      	bgt.n	80042ca <__swbuf_r+0x42>
 80042c0:	4621      	mov	r1, r4
 80042c2:	4628      	mov	r0, r5
 80042c4:	f000 f944 	bl	8004550 <_fflush_r>
 80042c8:	bb30      	cbnz	r0, 8004318 <__swbuf_r+0x90>
 80042ca:	68a3      	ldr	r3, [r4, #8]
 80042cc:	3001      	adds	r0, #1
 80042ce:	3b01      	subs	r3, #1
 80042d0:	60a3      	str	r3, [r4, #8]
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	6022      	str	r2, [r4, #0]
 80042d8:	701e      	strb	r6, [r3, #0]
 80042da:	6963      	ldr	r3, [r4, #20]
 80042dc:	4283      	cmp	r3, r0
 80042de:	d004      	beq.n	80042ea <__swbuf_r+0x62>
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	07db      	lsls	r3, r3, #31
 80042e4:	d506      	bpl.n	80042f4 <__swbuf_r+0x6c>
 80042e6:	2e0a      	cmp	r6, #10
 80042e8:	d104      	bne.n	80042f4 <__swbuf_r+0x6c>
 80042ea:	4621      	mov	r1, r4
 80042ec:	4628      	mov	r0, r5
 80042ee:	f000 f92f 	bl	8004550 <_fflush_r>
 80042f2:	b988      	cbnz	r0, 8004318 <__swbuf_r+0x90>
 80042f4:	4638      	mov	r0, r7
 80042f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <__swbuf_r+0x9c>)
 80042fa:	429c      	cmp	r4, r3
 80042fc:	d101      	bne.n	8004302 <__swbuf_r+0x7a>
 80042fe:	68ac      	ldr	r4, [r5, #8]
 8004300:	e7cf      	b.n	80042a2 <__swbuf_r+0x1a>
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <__swbuf_r+0xa0>)
 8004304:	429c      	cmp	r4, r3
 8004306:	bf08      	it	eq
 8004308:	68ec      	ldreq	r4, [r5, #12]
 800430a:	e7ca      	b.n	80042a2 <__swbuf_r+0x1a>
 800430c:	4621      	mov	r1, r4
 800430e:	4628      	mov	r0, r5
 8004310:	f000 f81e 	bl	8004350 <__swsetup_r>
 8004314:	2800      	cmp	r0, #0
 8004316:	d0cb      	beq.n	80042b0 <__swbuf_r+0x28>
 8004318:	f04f 37ff 	mov.w	r7, #4294967295
 800431c:	e7ea      	b.n	80042f4 <__swbuf_r+0x6c>
 800431e:	bf00      	nop
 8004320:	080048bc 	.word	0x080048bc
 8004324:	080048dc 	.word	0x080048dc
 8004328:	0800489c 	.word	0x0800489c

0800432c <_write_r>:
 800432c:	b538      	push	{r3, r4, r5, lr}
 800432e:	4604      	mov	r4, r0
 8004330:	4608      	mov	r0, r1
 8004332:	4611      	mov	r1, r2
 8004334:	2200      	movs	r2, #0
 8004336:	4d05      	ldr	r5, [pc, #20]	; (800434c <_write_r+0x20>)
 8004338:	602a      	str	r2, [r5, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	f7fb ff06 	bl	800014c <_write>
 8004340:	1c43      	adds	r3, r0, #1
 8004342:	d102      	bne.n	800434a <_write_r+0x1e>
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	b103      	cbz	r3, 800434a <_write_r+0x1e>
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	bd38      	pop	{r3, r4, r5, pc}
 800434c:	200001b0 	.word	0x200001b0

08004350 <__swsetup_r>:
 8004350:	4b32      	ldr	r3, [pc, #200]	; (800441c <__swsetup_r+0xcc>)
 8004352:	b570      	push	{r4, r5, r6, lr}
 8004354:	681d      	ldr	r5, [r3, #0]
 8004356:	4606      	mov	r6, r0
 8004358:	460c      	mov	r4, r1
 800435a:	b125      	cbz	r5, 8004366 <__swsetup_r+0x16>
 800435c:	69ab      	ldr	r3, [r5, #24]
 800435e:	b913      	cbnz	r3, 8004366 <__swsetup_r+0x16>
 8004360:	4628      	mov	r0, r5
 8004362:	f7ff fb1b 	bl	800399c <__sinit>
 8004366:	4b2e      	ldr	r3, [pc, #184]	; (8004420 <__swsetup_r+0xd0>)
 8004368:	429c      	cmp	r4, r3
 800436a:	d10f      	bne.n	800438c <__swsetup_r+0x3c>
 800436c:	686c      	ldr	r4, [r5, #4]
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004374:	0719      	lsls	r1, r3, #28
 8004376:	d42c      	bmi.n	80043d2 <__swsetup_r+0x82>
 8004378:	06dd      	lsls	r5, r3, #27
 800437a:	d411      	bmi.n	80043a0 <__swsetup_r+0x50>
 800437c:	2309      	movs	r3, #9
 800437e:	6033      	str	r3, [r6, #0]
 8004380:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004384:	f04f 30ff 	mov.w	r0, #4294967295
 8004388:	81a3      	strh	r3, [r4, #12]
 800438a:	e03e      	b.n	800440a <__swsetup_r+0xba>
 800438c:	4b25      	ldr	r3, [pc, #148]	; (8004424 <__swsetup_r+0xd4>)
 800438e:	429c      	cmp	r4, r3
 8004390:	d101      	bne.n	8004396 <__swsetup_r+0x46>
 8004392:	68ac      	ldr	r4, [r5, #8]
 8004394:	e7eb      	b.n	800436e <__swsetup_r+0x1e>
 8004396:	4b24      	ldr	r3, [pc, #144]	; (8004428 <__swsetup_r+0xd8>)
 8004398:	429c      	cmp	r4, r3
 800439a:	bf08      	it	eq
 800439c:	68ec      	ldreq	r4, [r5, #12]
 800439e:	e7e6      	b.n	800436e <__swsetup_r+0x1e>
 80043a0:	0758      	lsls	r0, r3, #29
 80043a2:	d512      	bpl.n	80043ca <__swsetup_r+0x7a>
 80043a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043a6:	b141      	cbz	r1, 80043ba <__swsetup_r+0x6a>
 80043a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043ac:	4299      	cmp	r1, r3
 80043ae:	d002      	beq.n	80043b6 <__swsetup_r+0x66>
 80043b0:	4630      	mov	r0, r6
 80043b2:	f000 f99b 	bl	80046ec <_free_r>
 80043b6:	2300      	movs	r3, #0
 80043b8:	6363      	str	r3, [r4, #52]	; 0x34
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043c0:	81a3      	strh	r3, [r4, #12]
 80043c2:	2300      	movs	r3, #0
 80043c4:	6063      	str	r3, [r4, #4]
 80043c6:	6923      	ldr	r3, [r4, #16]
 80043c8:	6023      	str	r3, [r4, #0]
 80043ca:	89a3      	ldrh	r3, [r4, #12]
 80043cc:	f043 0308 	orr.w	r3, r3, #8
 80043d0:	81a3      	strh	r3, [r4, #12]
 80043d2:	6923      	ldr	r3, [r4, #16]
 80043d4:	b94b      	cbnz	r3, 80043ea <__swsetup_r+0x9a>
 80043d6:	89a3      	ldrh	r3, [r4, #12]
 80043d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e0:	d003      	beq.n	80043ea <__swsetup_r+0x9a>
 80043e2:	4621      	mov	r1, r4
 80043e4:	4630      	mov	r0, r6
 80043e6:	f000 f927 	bl	8004638 <__smakebuf_r>
 80043ea:	89a0      	ldrh	r0, [r4, #12]
 80043ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043f0:	f010 0301 	ands.w	r3, r0, #1
 80043f4:	d00a      	beq.n	800440c <__swsetup_r+0xbc>
 80043f6:	2300      	movs	r3, #0
 80043f8:	60a3      	str	r3, [r4, #8]
 80043fa:	6963      	ldr	r3, [r4, #20]
 80043fc:	425b      	negs	r3, r3
 80043fe:	61a3      	str	r3, [r4, #24]
 8004400:	6923      	ldr	r3, [r4, #16]
 8004402:	b943      	cbnz	r3, 8004416 <__swsetup_r+0xc6>
 8004404:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004408:	d1ba      	bne.n	8004380 <__swsetup_r+0x30>
 800440a:	bd70      	pop	{r4, r5, r6, pc}
 800440c:	0781      	lsls	r1, r0, #30
 800440e:	bf58      	it	pl
 8004410:	6963      	ldrpl	r3, [r4, #20]
 8004412:	60a3      	str	r3, [r4, #8]
 8004414:	e7f4      	b.n	8004400 <__swsetup_r+0xb0>
 8004416:	2000      	movs	r0, #0
 8004418:	e7f7      	b.n	800440a <__swsetup_r+0xba>
 800441a:	bf00      	nop
 800441c:	2000000c 	.word	0x2000000c
 8004420:	080048bc 	.word	0x080048bc
 8004424:	080048dc 	.word	0x080048dc
 8004428:	0800489c 	.word	0x0800489c

0800442c <_close_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	2300      	movs	r3, #0
 8004430:	4d05      	ldr	r5, [pc, #20]	; (8004448 <_close_r+0x1c>)
 8004432:	4604      	mov	r4, r0
 8004434:	4608      	mov	r0, r1
 8004436:	602b      	str	r3, [r5, #0]
 8004438:	f7fc fbb3 	bl	8000ba2 <_close>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d102      	bne.n	8004446 <_close_r+0x1a>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	b103      	cbz	r3, 8004446 <_close_r+0x1a>
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	200001b0 	.word	0x200001b0

0800444c <__sflush_r>:
 800444c:	898a      	ldrh	r2, [r1, #12]
 800444e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004450:	4605      	mov	r5, r0
 8004452:	0710      	lsls	r0, r2, #28
 8004454:	460c      	mov	r4, r1
 8004456:	d457      	bmi.n	8004508 <__sflush_r+0xbc>
 8004458:	684b      	ldr	r3, [r1, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	dc04      	bgt.n	8004468 <__sflush_r+0x1c>
 800445e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	dc01      	bgt.n	8004468 <__sflush_r+0x1c>
 8004464:	2000      	movs	r0, #0
 8004466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800446a:	2e00      	cmp	r6, #0
 800446c:	d0fa      	beq.n	8004464 <__sflush_r+0x18>
 800446e:	2300      	movs	r3, #0
 8004470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004474:	682f      	ldr	r7, [r5, #0]
 8004476:	602b      	str	r3, [r5, #0]
 8004478:	d032      	beq.n	80044e0 <__sflush_r+0x94>
 800447a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	075a      	lsls	r2, r3, #29
 8004480:	d505      	bpl.n	800448e <__sflush_r+0x42>
 8004482:	6863      	ldr	r3, [r4, #4]
 8004484:	1ac0      	subs	r0, r0, r3
 8004486:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004488:	b10b      	cbz	r3, 800448e <__sflush_r+0x42>
 800448a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800448c:	1ac0      	subs	r0, r0, r3
 800448e:	2300      	movs	r3, #0
 8004490:	4602      	mov	r2, r0
 8004492:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004494:	4628      	mov	r0, r5
 8004496:	6a21      	ldr	r1, [r4, #32]
 8004498:	47b0      	blx	r6
 800449a:	1c43      	adds	r3, r0, #1
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	d106      	bne.n	80044ae <__sflush_r+0x62>
 80044a0:	6829      	ldr	r1, [r5, #0]
 80044a2:	291d      	cmp	r1, #29
 80044a4:	d82c      	bhi.n	8004500 <__sflush_r+0xb4>
 80044a6:	4a29      	ldr	r2, [pc, #164]	; (800454c <__sflush_r+0x100>)
 80044a8:	40ca      	lsrs	r2, r1
 80044aa:	07d6      	lsls	r6, r2, #31
 80044ac:	d528      	bpl.n	8004500 <__sflush_r+0xb4>
 80044ae:	2200      	movs	r2, #0
 80044b0:	6062      	str	r2, [r4, #4]
 80044b2:	6922      	ldr	r2, [r4, #16]
 80044b4:	04d9      	lsls	r1, r3, #19
 80044b6:	6022      	str	r2, [r4, #0]
 80044b8:	d504      	bpl.n	80044c4 <__sflush_r+0x78>
 80044ba:	1c42      	adds	r2, r0, #1
 80044bc:	d101      	bne.n	80044c2 <__sflush_r+0x76>
 80044be:	682b      	ldr	r3, [r5, #0]
 80044c0:	b903      	cbnz	r3, 80044c4 <__sflush_r+0x78>
 80044c2:	6560      	str	r0, [r4, #84]	; 0x54
 80044c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044c6:	602f      	str	r7, [r5, #0]
 80044c8:	2900      	cmp	r1, #0
 80044ca:	d0cb      	beq.n	8004464 <__sflush_r+0x18>
 80044cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044d0:	4299      	cmp	r1, r3
 80044d2:	d002      	beq.n	80044da <__sflush_r+0x8e>
 80044d4:	4628      	mov	r0, r5
 80044d6:	f000 f909 	bl	80046ec <_free_r>
 80044da:	2000      	movs	r0, #0
 80044dc:	6360      	str	r0, [r4, #52]	; 0x34
 80044de:	e7c2      	b.n	8004466 <__sflush_r+0x1a>
 80044e0:	6a21      	ldr	r1, [r4, #32]
 80044e2:	2301      	movs	r3, #1
 80044e4:	4628      	mov	r0, r5
 80044e6:	47b0      	blx	r6
 80044e8:	1c41      	adds	r1, r0, #1
 80044ea:	d1c7      	bne.n	800447c <__sflush_r+0x30>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0c4      	beq.n	800447c <__sflush_r+0x30>
 80044f2:	2b1d      	cmp	r3, #29
 80044f4:	d001      	beq.n	80044fa <__sflush_r+0xae>
 80044f6:	2b16      	cmp	r3, #22
 80044f8:	d101      	bne.n	80044fe <__sflush_r+0xb2>
 80044fa:	602f      	str	r7, [r5, #0]
 80044fc:	e7b2      	b.n	8004464 <__sflush_r+0x18>
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004504:	81a3      	strh	r3, [r4, #12]
 8004506:	e7ae      	b.n	8004466 <__sflush_r+0x1a>
 8004508:	690f      	ldr	r7, [r1, #16]
 800450a:	2f00      	cmp	r7, #0
 800450c:	d0aa      	beq.n	8004464 <__sflush_r+0x18>
 800450e:	0793      	lsls	r3, r2, #30
 8004510:	bf18      	it	ne
 8004512:	2300      	movne	r3, #0
 8004514:	680e      	ldr	r6, [r1, #0]
 8004516:	bf08      	it	eq
 8004518:	694b      	ldreq	r3, [r1, #20]
 800451a:	1bf6      	subs	r6, r6, r7
 800451c:	600f      	str	r7, [r1, #0]
 800451e:	608b      	str	r3, [r1, #8]
 8004520:	2e00      	cmp	r6, #0
 8004522:	dd9f      	ble.n	8004464 <__sflush_r+0x18>
 8004524:	4633      	mov	r3, r6
 8004526:	463a      	mov	r2, r7
 8004528:	4628      	mov	r0, r5
 800452a:	6a21      	ldr	r1, [r4, #32]
 800452c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004530:	47e0      	blx	ip
 8004532:	2800      	cmp	r0, #0
 8004534:	dc06      	bgt.n	8004544 <__sflush_r+0xf8>
 8004536:	89a3      	ldrh	r3, [r4, #12]
 8004538:	f04f 30ff 	mov.w	r0, #4294967295
 800453c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004540:	81a3      	strh	r3, [r4, #12]
 8004542:	e790      	b.n	8004466 <__sflush_r+0x1a>
 8004544:	4407      	add	r7, r0
 8004546:	1a36      	subs	r6, r6, r0
 8004548:	e7ea      	b.n	8004520 <__sflush_r+0xd4>
 800454a:	bf00      	nop
 800454c:	20400001 	.word	0x20400001

08004550 <_fflush_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	690b      	ldr	r3, [r1, #16]
 8004554:	4605      	mov	r5, r0
 8004556:	460c      	mov	r4, r1
 8004558:	b913      	cbnz	r3, 8004560 <_fflush_r+0x10>
 800455a:	2500      	movs	r5, #0
 800455c:	4628      	mov	r0, r5
 800455e:	bd38      	pop	{r3, r4, r5, pc}
 8004560:	b118      	cbz	r0, 800456a <_fflush_r+0x1a>
 8004562:	6983      	ldr	r3, [r0, #24]
 8004564:	b90b      	cbnz	r3, 800456a <_fflush_r+0x1a>
 8004566:	f7ff fa19 	bl	800399c <__sinit>
 800456a:	4b14      	ldr	r3, [pc, #80]	; (80045bc <_fflush_r+0x6c>)
 800456c:	429c      	cmp	r4, r3
 800456e:	d11b      	bne.n	80045a8 <_fflush_r+0x58>
 8004570:	686c      	ldr	r4, [r5, #4]
 8004572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0ef      	beq.n	800455a <_fflush_r+0xa>
 800457a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800457c:	07d0      	lsls	r0, r2, #31
 800457e:	d404      	bmi.n	800458a <_fflush_r+0x3a>
 8004580:	0599      	lsls	r1, r3, #22
 8004582:	d402      	bmi.n	800458a <_fflush_r+0x3a>
 8004584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004586:	f7ff faa7 	bl	8003ad8 <__retarget_lock_acquire_recursive>
 800458a:	4628      	mov	r0, r5
 800458c:	4621      	mov	r1, r4
 800458e:	f7ff ff5d 	bl	800444c <__sflush_r>
 8004592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004594:	4605      	mov	r5, r0
 8004596:	07da      	lsls	r2, r3, #31
 8004598:	d4e0      	bmi.n	800455c <_fflush_r+0xc>
 800459a:	89a3      	ldrh	r3, [r4, #12]
 800459c:	059b      	lsls	r3, r3, #22
 800459e:	d4dd      	bmi.n	800455c <_fflush_r+0xc>
 80045a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045a2:	f7ff fa9a 	bl	8003ada <__retarget_lock_release_recursive>
 80045a6:	e7d9      	b.n	800455c <_fflush_r+0xc>
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <_fflush_r+0x70>)
 80045aa:	429c      	cmp	r4, r3
 80045ac:	d101      	bne.n	80045b2 <_fflush_r+0x62>
 80045ae:	68ac      	ldr	r4, [r5, #8]
 80045b0:	e7df      	b.n	8004572 <_fflush_r+0x22>
 80045b2:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <_fflush_r+0x74>)
 80045b4:	429c      	cmp	r4, r3
 80045b6:	bf08      	it	eq
 80045b8:	68ec      	ldreq	r4, [r5, #12]
 80045ba:	e7da      	b.n	8004572 <_fflush_r+0x22>
 80045bc:	080048bc 	.word	0x080048bc
 80045c0:	080048dc 	.word	0x080048dc
 80045c4:	0800489c 	.word	0x0800489c

080045c8 <_lseek_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4604      	mov	r4, r0
 80045cc:	4608      	mov	r0, r1
 80045ce:	4611      	mov	r1, r2
 80045d0:	2200      	movs	r2, #0
 80045d2:	4d05      	ldr	r5, [pc, #20]	; (80045e8 <_lseek_r+0x20>)
 80045d4:	602a      	str	r2, [r5, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	f7fc fb07 	bl	8000bea <_lseek>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	d102      	bne.n	80045e6 <_lseek_r+0x1e>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	b103      	cbz	r3, 80045e6 <_lseek_r+0x1e>
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	bd38      	pop	{r3, r4, r5, pc}
 80045e8:	200001b0 	.word	0x200001b0

080045ec <__swhatbuf_r>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	460e      	mov	r6, r1
 80045f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f4:	4614      	mov	r4, r2
 80045f6:	2900      	cmp	r1, #0
 80045f8:	461d      	mov	r5, r3
 80045fa:	b096      	sub	sp, #88	; 0x58
 80045fc:	da08      	bge.n	8004610 <__swhatbuf_r+0x24>
 80045fe:	2200      	movs	r2, #0
 8004600:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004604:	602a      	str	r2, [r5, #0]
 8004606:	061a      	lsls	r2, r3, #24
 8004608:	d410      	bmi.n	800462c <__swhatbuf_r+0x40>
 800460a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800460e:	e00e      	b.n	800462e <__swhatbuf_r+0x42>
 8004610:	466a      	mov	r2, sp
 8004612:	f000 f8c5 	bl	80047a0 <_fstat_r>
 8004616:	2800      	cmp	r0, #0
 8004618:	dbf1      	blt.n	80045fe <__swhatbuf_r+0x12>
 800461a:	9a01      	ldr	r2, [sp, #4]
 800461c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004620:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004624:	425a      	negs	r2, r3
 8004626:	415a      	adcs	r2, r3
 8004628:	602a      	str	r2, [r5, #0]
 800462a:	e7ee      	b.n	800460a <__swhatbuf_r+0x1e>
 800462c:	2340      	movs	r3, #64	; 0x40
 800462e:	2000      	movs	r0, #0
 8004630:	6023      	str	r3, [r4, #0]
 8004632:	b016      	add	sp, #88	; 0x58
 8004634:	bd70      	pop	{r4, r5, r6, pc}
	...

08004638 <__smakebuf_r>:
 8004638:	898b      	ldrh	r3, [r1, #12]
 800463a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800463c:	079d      	lsls	r5, r3, #30
 800463e:	4606      	mov	r6, r0
 8004640:	460c      	mov	r4, r1
 8004642:	d507      	bpl.n	8004654 <__smakebuf_r+0x1c>
 8004644:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	6123      	str	r3, [r4, #16]
 800464c:	2301      	movs	r3, #1
 800464e:	6163      	str	r3, [r4, #20]
 8004650:	b002      	add	sp, #8
 8004652:	bd70      	pop	{r4, r5, r6, pc}
 8004654:	466a      	mov	r2, sp
 8004656:	ab01      	add	r3, sp, #4
 8004658:	f7ff ffc8 	bl	80045ec <__swhatbuf_r>
 800465c:	9900      	ldr	r1, [sp, #0]
 800465e:	4605      	mov	r5, r0
 8004660:	4630      	mov	r0, r6
 8004662:	f7ff fa5b 	bl	8003b1c <_malloc_r>
 8004666:	b948      	cbnz	r0, 800467c <__smakebuf_r+0x44>
 8004668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800466c:	059a      	lsls	r2, r3, #22
 800466e:	d4ef      	bmi.n	8004650 <__smakebuf_r+0x18>
 8004670:	f023 0303 	bic.w	r3, r3, #3
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	81a3      	strh	r3, [r4, #12]
 800467a:	e7e3      	b.n	8004644 <__smakebuf_r+0xc>
 800467c:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <__smakebuf_r+0x7c>)
 800467e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004680:	89a3      	ldrh	r3, [r4, #12]
 8004682:	6020      	str	r0, [r4, #0]
 8004684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004688:	81a3      	strh	r3, [r4, #12]
 800468a:	9b00      	ldr	r3, [sp, #0]
 800468c:	6120      	str	r0, [r4, #16]
 800468e:	6163      	str	r3, [r4, #20]
 8004690:	9b01      	ldr	r3, [sp, #4]
 8004692:	b15b      	cbz	r3, 80046ac <__smakebuf_r+0x74>
 8004694:	4630      	mov	r0, r6
 8004696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800469a:	f000 f893 	bl	80047c4 <_isatty_r>
 800469e:	b128      	cbz	r0, 80046ac <__smakebuf_r+0x74>
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	81a3      	strh	r3, [r4, #12]
 80046ac:	89a0      	ldrh	r0, [r4, #12]
 80046ae:	4305      	orrs	r5, r0
 80046b0:	81a5      	strh	r5, [r4, #12]
 80046b2:	e7cd      	b.n	8004650 <__smakebuf_r+0x18>
 80046b4:	08003935 	.word	0x08003935

080046b8 <memchr>:
 80046b8:	4603      	mov	r3, r0
 80046ba:	b510      	push	{r4, lr}
 80046bc:	b2c9      	uxtb	r1, r1
 80046be:	4402      	add	r2, r0
 80046c0:	4293      	cmp	r3, r2
 80046c2:	4618      	mov	r0, r3
 80046c4:	d101      	bne.n	80046ca <memchr+0x12>
 80046c6:	2000      	movs	r0, #0
 80046c8:	e003      	b.n	80046d2 <memchr+0x1a>
 80046ca:	7804      	ldrb	r4, [r0, #0]
 80046cc:	3301      	adds	r3, #1
 80046ce:	428c      	cmp	r4, r1
 80046d0:	d1f6      	bne.n	80046c0 <memchr+0x8>
 80046d2:	bd10      	pop	{r4, pc}

080046d4 <__malloc_lock>:
 80046d4:	4801      	ldr	r0, [pc, #4]	; (80046dc <__malloc_lock+0x8>)
 80046d6:	f7ff b9ff 	b.w	8003ad8 <__retarget_lock_acquire_recursive>
 80046da:	bf00      	nop
 80046dc:	200001a4 	.word	0x200001a4

080046e0 <__malloc_unlock>:
 80046e0:	4801      	ldr	r0, [pc, #4]	; (80046e8 <__malloc_unlock+0x8>)
 80046e2:	f7ff b9fa 	b.w	8003ada <__retarget_lock_release_recursive>
 80046e6:	bf00      	nop
 80046e8:	200001a4 	.word	0x200001a4

080046ec <_free_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4605      	mov	r5, r0
 80046f0:	2900      	cmp	r1, #0
 80046f2:	d040      	beq.n	8004776 <_free_r+0x8a>
 80046f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046f8:	1f0c      	subs	r4, r1, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bfb8      	it	lt
 80046fe:	18e4      	addlt	r4, r4, r3
 8004700:	f7ff ffe8 	bl	80046d4 <__malloc_lock>
 8004704:	4a1c      	ldr	r2, [pc, #112]	; (8004778 <_free_r+0x8c>)
 8004706:	6813      	ldr	r3, [r2, #0]
 8004708:	b933      	cbnz	r3, 8004718 <_free_r+0x2c>
 800470a:	6063      	str	r3, [r4, #4]
 800470c:	6014      	str	r4, [r2, #0]
 800470e:	4628      	mov	r0, r5
 8004710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004714:	f7ff bfe4 	b.w	80046e0 <__malloc_unlock>
 8004718:	42a3      	cmp	r3, r4
 800471a:	d908      	bls.n	800472e <_free_r+0x42>
 800471c:	6820      	ldr	r0, [r4, #0]
 800471e:	1821      	adds	r1, r4, r0
 8004720:	428b      	cmp	r3, r1
 8004722:	bf01      	itttt	eq
 8004724:	6819      	ldreq	r1, [r3, #0]
 8004726:	685b      	ldreq	r3, [r3, #4]
 8004728:	1809      	addeq	r1, r1, r0
 800472a:	6021      	streq	r1, [r4, #0]
 800472c:	e7ed      	b.n	800470a <_free_r+0x1e>
 800472e:	461a      	mov	r2, r3
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	b10b      	cbz	r3, 8004738 <_free_r+0x4c>
 8004734:	42a3      	cmp	r3, r4
 8004736:	d9fa      	bls.n	800472e <_free_r+0x42>
 8004738:	6811      	ldr	r1, [r2, #0]
 800473a:	1850      	adds	r0, r2, r1
 800473c:	42a0      	cmp	r0, r4
 800473e:	d10b      	bne.n	8004758 <_free_r+0x6c>
 8004740:	6820      	ldr	r0, [r4, #0]
 8004742:	4401      	add	r1, r0
 8004744:	1850      	adds	r0, r2, r1
 8004746:	4283      	cmp	r3, r0
 8004748:	6011      	str	r1, [r2, #0]
 800474a:	d1e0      	bne.n	800470e <_free_r+0x22>
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4401      	add	r1, r0
 8004752:	6011      	str	r1, [r2, #0]
 8004754:	6053      	str	r3, [r2, #4]
 8004756:	e7da      	b.n	800470e <_free_r+0x22>
 8004758:	d902      	bls.n	8004760 <_free_r+0x74>
 800475a:	230c      	movs	r3, #12
 800475c:	602b      	str	r3, [r5, #0]
 800475e:	e7d6      	b.n	800470e <_free_r+0x22>
 8004760:	6820      	ldr	r0, [r4, #0]
 8004762:	1821      	adds	r1, r4, r0
 8004764:	428b      	cmp	r3, r1
 8004766:	bf01      	itttt	eq
 8004768:	6819      	ldreq	r1, [r3, #0]
 800476a:	685b      	ldreq	r3, [r3, #4]
 800476c:	1809      	addeq	r1, r1, r0
 800476e:	6021      	streq	r1, [r4, #0]
 8004770:	6063      	str	r3, [r4, #4]
 8004772:	6054      	str	r4, [r2, #4]
 8004774:	e7cb      	b.n	800470e <_free_r+0x22>
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	200001a8 	.word	0x200001a8

0800477c <_read_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4604      	mov	r4, r0
 8004780:	4608      	mov	r0, r1
 8004782:	4611      	mov	r1, r2
 8004784:	2200      	movs	r2, #0
 8004786:	4d05      	ldr	r5, [pc, #20]	; (800479c <_read_r+0x20>)
 8004788:	602a      	str	r2, [r5, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	f7fc f9ec 	bl	8000b68 <_read>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d102      	bne.n	800479a <_read_r+0x1e>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	b103      	cbz	r3, 800479a <_read_r+0x1e>
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	bd38      	pop	{r3, r4, r5, pc}
 800479c:	200001b0 	.word	0x200001b0

080047a0 <_fstat_r>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	2300      	movs	r3, #0
 80047a4:	4d06      	ldr	r5, [pc, #24]	; (80047c0 <_fstat_r+0x20>)
 80047a6:	4604      	mov	r4, r0
 80047a8:	4608      	mov	r0, r1
 80047aa:	4611      	mov	r1, r2
 80047ac:	602b      	str	r3, [r5, #0]
 80047ae:	f7fc fa03 	bl	8000bb8 <_fstat>
 80047b2:	1c43      	adds	r3, r0, #1
 80047b4:	d102      	bne.n	80047bc <_fstat_r+0x1c>
 80047b6:	682b      	ldr	r3, [r5, #0]
 80047b8:	b103      	cbz	r3, 80047bc <_fstat_r+0x1c>
 80047ba:	6023      	str	r3, [r4, #0]
 80047bc:	bd38      	pop	{r3, r4, r5, pc}
 80047be:	bf00      	nop
 80047c0:	200001b0 	.word	0x200001b0

080047c4 <_isatty_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	2300      	movs	r3, #0
 80047c8:	4d05      	ldr	r5, [pc, #20]	; (80047e0 <_isatty_r+0x1c>)
 80047ca:	4604      	mov	r4, r0
 80047cc:	4608      	mov	r0, r1
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	f7fc fa01 	bl	8000bd6 <_isatty>
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	d102      	bne.n	80047de <_isatty_r+0x1a>
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	b103      	cbz	r3, 80047de <_isatty_r+0x1a>
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	bd38      	pop	{r3, r4, r5, pc}
 80047e0:	200001b0 	.word	0x200001b0

080047e4 <_init>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	bf00      	nop
 80047e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ea:	bc08      	pop	{r3}
 80047ec:	469e      	mov	lr, r3
 80047ee:	4770      	bx	lr

080047f0 <_fini>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	bf00      	nop
 80047f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f6:	bc08      	pop	{r3}
 80047f8:	469e      	mov	lr, r3
 80047fa:	4770      	bx	lr
